{"version":3,"sources":["styles/icons/star_default.svg","styles/icons/star_empty.svg","components/star/index.tsx","components/level-select-top-bar/index.tsx","services/constants.ts","services/context.ts","components/tile/index.tsx","classes/grid-cell.tsx","classes/grid.ts","components/level-select-grid/index.tsx","classes/item.ts","components/swatch/index.tsx","services/levels.ts","classes/swatch.tsx","services/_levels/swatches-1.tsx","services/_levels/swatches-2.tsx","services/_levels/swatches-3.tsx","services/_levels/tricolor.ts","services/_levels/up-the-middle.ts","services/_levels/keys.ts","services/_levels/dark-tiles-1.tsx","services/_levels/dark-tiles-2.ts","services/_levels/dark-swatch.tsx","components/level-preview/index.tsx","components/level-select-buttons/index.tsx","components/level-select-mobile/index.tsx","components/level-select/index.tsx","components/player/index.tsx","services/hooks.ts","services/util.ts","components/grid/index.tsx","components/game-menu/index.tsx","components/game-top-bar/index.tsx","components/game-hud/index.tsx","components/game-complete/index.tsx","components/solution-player-cursor/index.tsx","components/solution-adjust-menu/index.tsx","components/solution/index.tsx","components/game-adjust-menu/index.tsx","components/settings/index.tsx","components/instructions/index.tsx","components/game-tutorial/index.tsx","classes/player.ts","classes/game-history.ts","classes/grid-animation-frame.ts","classes/player-animation-frame.ts","classes/tile-animation-frame.ts","components/game/index.tsx","components/game-redirect/index.tsx","components/home/index.tsx","services/cc-util.ts","services/idb.ts","components/app/index.tsx","index.tsx"],"names":["_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgStarDefault","_ref","svgRef","title","titleId","props","width","height","viewBox","xmlns","ref","id","transform","d","fill","stroke","strokeWidth","style","paintOrder","ForwardRef","SvgStarEmpty","Star","size","className","filled","LevelSelectTopBar","starText","starCount","to","icon","faArrowLeft","Color","AnimationType","Direction","DEFAULT_SOLUTION_CONTAINER_SIZE","TILES_SIZES","DIR_OFFSET","UP","rowOffset","colOffset","DOWN","LEFT","RIGHT","GridOffsetContext","React","createContext","x","y","TileSizeContext","Tile","row","col","pRow","pCol","offset","useContext","tileSize","color","DEFAULT","colorClass","alt","solutionColor","solution","solutionClass","solutionStyle","opacity","showSolution","tileStyle","left","top","hoverTile","playerRow","playerCol","undefined","onTilePress","onClick","tileBackStyle","borderRadius","Math","ceil","frontStyle","borderWidth","GridCell","item","immerable","playerColor","DARK","elements","push","render","Grid","config","cells","map","rowIdx","cell","colIdx","hasTile","tileColor","cloneDeep","max","j","gridCell","renderElements","renderSolution","windowWidth","windowHeight","LevelSelectGrid","useResizeDetector","refreshMode","refreshRate","grid","getCenterOffset","gridTiles","Provider","value","Item","SwatchComponent","useState","random","animationDelay","SWATCH_SIZE","floor","QUARTER_DIFF","swatchStyle","borderStyle","InstructionHighlightType","Swatch","LEVEL_SWATCHES_1","description","levelInstructions","element","gridConfig","RED","BLUE","levelName","starRequirement3","starRequirement2","requiredToUnlock","LEVEL_SWATCHES_2","PURPLE","ORANGE","LEVEL_SWATCHES_3","GREEN","YELLOW","TRICOLOR","UP_THE_MIDDLE","KEYS","DARK_TILES_1","DARK_TILES_2","DARK_SWATCH","LEVELS","STAR_SIZE","getLevelScoringTable","level","getPersonalBestTable","starsScored","moves","pbStars","pbMoves","LevelPreview","selectedLevel","starsScoredOnLevel","toNextLevel","starsToUnlockLevel","faLock","faPlay","levelScoreMap","LevelSelectButtons","toggleSelected","levelNum","setIsSelected","isSelected","setSelectedLevel","buttons","idx","btnClass","bind","containerRef","LevelSelectMobile","levelPreview","LevelSelect","btnContainerRef","useRef","mainClassName","event","preventDefault","current","PlayerComponent","movementToggle","rowPosition","setRowPosition","colPosition","setColPosition","prevProps","useEffect","usePrevious","PLAYER_SIZE","frameCount","interval","setInterval","clearInterval","onAnimationEnd","increment","easeQuadInOut","playerStyle","playerBodyStyle","sleep","ms","Promise","resolve","setTimeout","getBoundValue","val","upperBound","lowerBound","min","GridComponent","isPointerDown","setIsPointerDown","isDragging","setIsDragging","distanceDragged","setDistanceDragged","lastPointerX","setLastPointerX","lastPointerY","setLastPointerY","offsetPctX","setOffsetPctX","offsetPctY","setOffsetPctY","hasInitialOffset","setHasInitialOffset","setInitialOffset","onGridSizeChange","levelNumber","shouldResetLayout","gridElements","isPlayerMoving","onPointerUp","a","wasDragging","releasePointerCapture","pointerId","dragHandler","gridContainerProps","onPointerDown","clientX","clientY","onPointerMove","distX","abs","distY","totalDist","setPointerCapture","nextOffsetPctX","nextOffsetPctY","onPlayerAnimationEnd","GameMenu","openClass","isOpen","overlayClass","navClass","tabIndex","tutorialBtn","showSettings","faCog","startTutorial","setOpen","faInfoCircle","faThLarge","showInstructions","faQuestionCircle","resetLayout","faSync","GameTopBar","toggled","isMenuOpen","onToggle","setMenuOpen","rounded","label","hideOutline","movesTaken","GameHUD","GameComplete","nextBtn","nextUnlockElement","stars","restartHandler","SolutionPlayerCursor","cursorStyle","cornerStyle","SolutionAdjustMenu","zoomInClass","canZoomIn","zoomOutClass","canZoomOut","zoomInHandler","faSearchPlus","zoomOutHandler","faSearchMinus","MIN_CONTAINER_SIZE","getBoundedContainerOffsetPctX","offsetPct","solutionWidth","gridWidth","minOffset","getBoundedContainerOffsetPctY","solutionHeight","gridHeight","TOP_MENU_HEIGHT","getContainerOffsetX","getContainerOffsetY","DEFAULT_CONTAINER_OFFSET","getProperContainerSize","maxContainerWidth","maxContainerHeight","Solution","tileSizeIndex","setTileSizeIndex","containerWidth","setContainerWidth","containerHeight","setContainerHeight","mobileHeightPct","setMobileHeightPct","isGridPointerDown","setIsGridPointerDown","gridOffsetPctX","setGridOffsetPctX","gridOffsetPctY","setGridOffsetPctY","isContainerPointerDown","setIsContainerPointerDown","containerOffsetPctX","setContainerOffsetPctX","containerOffsetPctY","setContainerOffsetPctY","solutionTopRef","isInMobileView","onResetLayout","appHeight","pct","onGridPointerUp","onContainerPointerUp","canAdjust","gameOver","solutionProps","node","parentElement","isInElementById","topBarClassName","topBarProps","containerStyle","mHeight","right","solutionTiles","solutionElement","maxSize","axis","onResize","data","minConstraints","maxConstraints","Infinity","resizeHandles","newWidth","newHeight","GameAdjustMenu","undoClass","canUndo","redoClass","canRedo","undoHandler","faUndoAlt","redoHandler","faRedoAlt","Settings","showEraseConfirm","setShowEraseConfirm","visible","eraseElement","onEraseData","eraseConfirm","onGoBack","Instructions","GameTutorial","currentInstruction","setCurrentInstruction","onComplete","child","canGoPrevious","canSkip","prevBtn","skipBtn","nextText","Player","movement","currentDirection","nextPlayerColor","nextRow","nextCol","getCellAt","updatePlayerColor","moved","newRow","newCol","newColor","directionMoved","gridCellMovedTo","GameHistoryNode","previous","next","GameHistoryDoublyLinkedList","start","end","_size","GameHistory","undoHistory","redoHistory","currentState","clear","shift","undoNode","pop","redoNode","GridAnimationFrame","animationType","PLAYER","TILE","PlayerAnimationFrame","TileAnimationFrame","Game","movementKeyFnMap","utilKeyFnMap","keyPressFlagMap","gridAnimationQueue","gameContainerRef","gameHistory","state","gameStarted","gameWon","starsWon","areSettingsOpened","areInstructionsOpened","shouldCancelTilePress","showTutorial","completedBefore","Queue","createRef","onKeyDown","onKeyUp","resetFlags","restartGame","inGameRestart","undo","redo","zoomIn","zoomOut","hideOtherWindows","setShouldCancelTilePress","onCompleteTutorial","ArrowUp","movePlayerByKeyDown","ArrowDown","ArrowLeft","ArrowRight","r","z","handleMenuKeyDown","toLowerCase","setState","activeEle","document","activeElement","isActiveOnHam","classList","contains","isActiveOnLink","isActiveOnFirst","isActiveOnLast","hamBtn","querySelector","focus","firstBtn","sibling","nextSibling","previousSibling","lastBtn","player","playerMovement","moveResult","move","moveCount","updatedTileColor","updateColor","enqueue","prevDirection","dir","movedPrevLoop","isGameActive","isAnimationInProgress","gridClone","makeMove","startNextAnimation","numTimesToMove","animationFrame","dequeue","isPlayerAnimation","produce","draft","isGridSolved","handleStarUpdate","newGrid","canAlterGameState","gameHistoryState","bool","gameClass","gameStyle","display","gameCompleteEle","tutorial","onFocus","onBlur","Component","GameRedirect","useParams","levelInt","parseInt","isNaN","solved","TITLE","Home","gradientDelay","playAnimation","setPlayAnimation","setShowSettings","setShowInstructions","playLevelNumber","setPlayLevelNumber","onReturn","homeClass","coloredTitles","bgLayers","titleClass","layerClass","gradientStyle","homeStyle","lastUnlockedLevel","firstUnsolvedLevel","firstIncompleteLevel","getDefaultLevelScoreMap","getStarsScoredByMoves","starReq3","starReq2","DB_NAME","SCORES_STORE_NAME","upgrade","db","createObjectStore","keyPath","openDB","transaction","scoresStore","objectStore","getAll","scores","done","close","levelById","levelConfig","score","levelId","get","prevScore","put","App","setStarCount","playHomeAnimation","setPlayHomeAnimation","isReady","setIsReady","areFontsLoaded","setAreFontsLoaded","isSavedDataLoaded","setIsSavedDataLoaded","setLevelScoreMap","loaderBarFill","getLoaderBarFill","add","onFontsLoad","WebFont","load","custom","families","timeout","active","inactive","loadLevelScores","then","mapping","totalStars","catch","toast","error","numFinished","loadingTextElement","getElementById","textContent","remove","loaderElement","onFinish","path","prevStars","nextLevelScoreMap","saveScore","clearScores","success","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.d4f27331.chunk.js","sourcesContent":["var _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgStarDefault(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 31.031,\n    height: 29.924,\n    viewBox: \"0 0 31.031214 29.924433\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(-14.022 -18.173)\",\n    \"data-name\": \"Layer 21\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m43.075 32.997a3.38 3.38 0 0 0 -1.87 -5.75l-5.25-0.79a1.42 1.42 0 0 1 -1 -0.75l-2.42-4.74a3.37 3.37 0 0 0 -6 0l-2.39 4.74a1.42 1.42 0 0 1 -1 0.75l-5.25 0.79a3.38 3.38 0 0 0 -1.9 5.75l3.78 3.72a1.4 1.4 0 0 1 0.4 1.21l-0.87 5.23a3.35 3.35 0 0 0 1.34 3.29 3.4 3.4 0 0 0 2 0.65 3.37 3.37 0 0 0 1.56 -0.39l4.7-2.44a1.38 1.38 0 0 1 1.28 0l4.7 2.44a3.37 3.37 0 0 0 4.89 -3.55l-0.87-5.23a1.4 1.4 0 0 1 0.4 -1.21z\",\n    fill: \"#f7c761\",\n    stroke: \"#704728\",\n    strokeWidth: 2,\n    style: {\n      paintOrder: \"normal\"\n    }\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgStarDefault);\nexport default __webpack_public_path__ + \"static/media/star_default.50ce398f.svg\";\nexport { ForwardRef as ReactComponent };","var _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgStarEmpty(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 31.031,\n    height: 29.924,\n    viewBox: \"0 0 31.031214 29.924433\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(-14.022 -18.173)\",\n    \"data-name\": \"Layer 21\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m43.075 32.997a3.38 3.38 0 0 0 -1.87 -5.75l-5.25-0.79a1.42 1.42 0 0 1 -1 -0.75l-2.42-4.74a3.37 3.37 0 0 0 -6 0l-2.39 4.74a1.42 1.42 0 0 1 -1 0.75l-5.25 0.79a3.38 3.38 0 0 0 -1.9 5.75l3.78 3.72a1.4 1.4 0 0 1 0.4 1.21l-0.87 5.23a3.35 3.35 0 0 0 1.34 3.29 3.4 3.4 0 0 0 2 0.65 3.37 3.37 0 0 0 1.56 -0.39l4.7-2.44a1.38 1.38 0 0 1 1.28 0l4.7 2.44a3.37 3.37 0 0 0 4.89 -3.55l-0.87-5.23a1.4 1.4 0 0 1 0.4 -1.21z\",\n    fill: \"#333\",\n    stroke: \"#704728\",\n    strokeWidth: 2,\n    style: {\n      paintOrder: \"normal\"\n    }\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgStarEmpty);\nexport default __webpack_public_path__ + \"static/media/star_empty.a9d1e6f6.svg\";\nexport { ForwardRef as ReactComponent };","import { ReactComponent as StarSvg } from \"../../styles/icons/star_default.svg\";\r\nimport { ReactComponent as EmptyStarSvg } from \"../../styles/icons/star_empty.svg\";\r\n\r\ninterface StarProps {\r\n    filled: boolean,\r\n    className?: string,\r\n    size?: number\r\n};\r\n\r\nexport default function Star(props: StarProps) {\r\n    const style = props.size ? { height: `${props.size}px`, width: `${props.size}px` } : {};\r\n    const className = props.className ?? \"\";\r\n\r\n    if (props.filled) {\r\n        return (<StarSvg className={className} style={style} />);\r\n    }\r\n\r\n    return (<EmptyStarSvg className={className} style={style} />);\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport Star from \"../star\";\r\nimport \"./level-select-top-bar.scss\";\r\n\r\ninterface LevelSelectTopBarProps {\r\n    starCount: number\r\n};\r\n\r\nexport default function LevelSelectTopBar(props: LevelSelectTopBarProps) {\r\n    const starText = `\\u00d7 ${props.starCount}`;\r\n\r\n    return (\r\n        <header className=\"top-bar level-select-top-bar\">\r\n            <Link to=\"/\" className=\"top-bar-text back-btn\" aria-label=\"Go back\">\r\n                <FontAwesomeIcon icon={faArrowLeft} />\r\n            </Link>\r\n            <div className=\"level-select-title\">\r\n                <h1 className=\"top-bar-text\">Level Select</h1>\r\n            </div>\r\n            <div className=\"level-select-stars\">\r\n                <span className=\"top-bar-text\">\r\n                    <Star filled size={24} />\r\n                    {starText}\r\n                </span>\r\n            </div>\r\n            <div className=\"clearfix\"></div>\r\n        </header>\r\n    );\r\n}\r\n","export const DEFAULT_TILE_SIZE = 48;\r\nexport const DEFAULT_SOLUTION_TILE_SIZE = 20;\r\nexport const DEFAULT_SOLUTION_CONTAINER_SIZE = 300;\r\nexport const TOP_MENU_HEIGHT = 48;\r\nexport const GAME_MOBILE_WIDTH = 640;\r\n\r\nexport const TILES_SIZES = [ 12, 16, 20, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96 ];\r\n\r\nexport enum Color {\r\n    BLUE = \"blue\",\r\n    DARK = \"dark\",\r\n    DEFAULT = \"default\",\r\n    GREEN = \"green\",\r\n    ORANGE = \"orange\",\r\n    PURPLE = \"purple\",\r\n    RED = \"red\",\r\n    YELLOW = \"yellow\"\r\n};\r\n\r\nexport enum AnimationType {\r\n    PLAYER = \"player\",\r\n    TILE = \"tile\"\r\n};\r\n\r\nexport enum Direction {\r\n    UP = \"up\",\r\n    DOWN = \"down\",\r\n    LEFT = \"left\",\r\n    RIGHT = \"right\"\r\n};\r\n\r\ninterface DirectionOffset {\r\n    rowOffset: number,\r\n    colOffset: number\r\n};\r\n\r\nexport const DIR_OFFSET: Record<Direction, DirectionOffset> = {\r\n    [Direction.UP]: { rowOffset: -1, colOffset: 0 },\r\n    [Direction.DOWN]: { rowOffset: 1, colOffset: 0 },\r\n    [Direction.LEFT]: { rowOffset: 0, colOffset: -1 },\r\n    [Direction.RIGHT]: { rowOffset: 0, colOffset: 1 }\r\n};\r\n","import React from \"react\";\r\nimport { DEFAULT_TILE_SIZE } from \"../services/constants\";\r\n\r\ninterface GridOffset {\r\n    x: number,\r\n    y: number\r\n};\r\n\r\nexport type { GridOffset };\r\n\r\nexport const GridOffsetContext: React.Context<GridOffset> = React.createContext({ x: 0, y: 0 });\r\n\r\nexport const TileSizeContext = React.createContext(DEFAULT_TILE_SIZE);\r\n","import { useContext } from \"react\";\r\nimport { GridOffsetContext, TileSizeContext } from \"../../services/context\";\r\nimport { Color } from \"../../services/constants\";\r\nimport \"./tile.scss\";\r\n\r\ninterface TileProps {\r\n    row: number,\r\n    col: number,\r\n    color?: Color,\r\n    solution?: Color,\r\n    alt?: boolean,\r\n    showSolution?: boolean,\r\n    playerRow?: number,\r\n    playerCol?: number,\r\n    onTilePress?: (row: number, col: number) => void\r\n}\r\n\r\nfunction isSameRowOrColumn(row: number, col: number, pRow?: number, pCol?: number): boolean {\r\n    if (pRow === undefined || pCol === undefined) {\r\n        return false;\r\n    }\r\n\r\n    // Returns true if cell is in the same column or row as the player, but not in the exact\r\n    // same position as the player\r\n    return (row === pRow && col !== pCol) || (row !== pRow && col === pCol);\r\n}\r\n\r\nexport default function Tile(props: TileProps) {\r\n    const offset = useContext(GridOffsetContext);\r\n    const tileSize = useContext(TileSizeContext);\r\n    const color = props.color ?? Color.DEFAULT;\r\n    let colorClass = `tile-front bg-${color} ${props.alt ? \"alt\" : \"\"}`;\r\n\r\n    const solutionColor = props.solution ?? Color.DEFAULT;\r\n    const solutionClass = `tile-solution bg-${solutionColor} ${props.alt ? \"alt\" : \"\"}`;\r\n    const solutionStyle = { opacity: props.showSolution ? \"1\" : \"0\" };\r\n\r\n    const tileStyle = {\r\n        height: `${tileSize}px`,\r\n        left: `${(props.col * tileSize) + offset.x}px`,\r\n        top: `${(props.row * tileSize) + offset.y}px`,\r\n        width: `${tileSize}px`\r\n    };\r\n\r\n    // Hover tile, if the user hovers over a tile in the same row or column as the player\r\n    let hoverTile = null;\r\n    if (isSameRowOrColumn(props.row, props.col, props.playerRow, props.playerCol) &&\r\n        props.onTilePress) {\r\n\r\n        const onTileClick = () => {\r\n            props.onTilePress && props.onTilePress(props.row, props.col);\r\n        }\r\n\r\n        hoverTile = <div className=\"tile-hover\" onClick={onTileClick}></div>;\r\n    }\r\n\r\n    const tileBackStyle = {\r\n        borderRadius: `${Math.ceil(tileSize / 12)}px`\r\n    };\r\n\r\n    const frontStyle = {\r\n        borderWidth: `${Math.ceil(tileSize / 12)}px`\r\n    };\r\n\r\n    return (\r\n        <div className=\"tile\" style={tileStyle}>\r\n            {hoverTile}\r\n            <div className={solutionClass} style={solutionStyle}></div>\r\n            <div className={colorClass} style={frontStyle}></div>\r\n            <div className=\"tile-back\" style={tileBackStyle}></div>\r\n        </div>\r\n    );\r\n}\r\n","import { immerable } from \"immer\";\r\nimport { Color } from \"../services/constants\";\r\nimport Tile from \"../components/tile\";\r\nimport type Item from \"./item\";\r\n\r\nexport default class GridCell {\r\n    [ immerable ] = true;\r\n    row: number;\r\n    col: number;\r\n    color: Color;\r\n    solutionColor: Color;\r\n    item?: Item;\r\n\r\n    constructor(row: number, col: number, color?: Color, solutionColor?: Color, item?: Item) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.color = color ?? Color.DEFAULT;\r\n        this.solutionColor = solutionColor ?? Color.DEFAULT;\r\n        this.item = item;\r\n    }\r\n\r\n    updateColor(playerColor: Color): (Color | null) {\r\n\r\n        // Cannot change color of a dark tile\r\n        if (this.color === Color.DARK) {\r\n            return null;\r\n        }\r\n\r\n        // If the player is dark and the tile is colored, erase the tile color\r\n        if (playerColor === Color.DARK && this.color !== Color.DEFAULT) {\r\n            this.color = Color.DEFAULT;\r\n            return this.color;\r\n        }\r\n\r\n        // If the player is colored and the tile is a different color (but not dark),\r\n        // re-color the tile\r\n        if (playerColor !== Color.DEFAULT && playerColor !== Color.DARK &&\r\n            playerColor !== this.color) {\r\n            this.color = playerColor;\r\n            return this.color;\r\n        }\r\n\r\n        // Otherwise, tile stays the same\r\n        return null;\r\n    }\r\n\r\n    renderElements(\r\n        showSolution: boolean,\r\n        playerRow?: number,\r\n        playerCol?: number,\r\n        onTilePress?: (row: number, col: number) => void\r\n    ): JSX.Element[] {\r\n        const key = `tile-${this.row}-${this.col}`;\r\n        const elements = [];\r\n        elements.push(\r\n            <Tile key={key} color={this.color} alt={(this.row + this.col) % 2 === 0}\r\n                solution={this.solutionColor} showSolution={showSolution}\r\n                row={this.row} col={this.col} playerRow={playerRow} playerCol={playerCol}\r\n                onTilePress={onTilePress} />\r\n        );\r\n\r\n        if (this.item) {\r\n            elements.push(this.item.render(this.row, this.col));\r\n        }\r\n\r\n        return elements;\r\n    }\r\n\r\n    renderSolution(): JSX.Element {\r\n        const key = `solution-tile-${this.row}-${this.col}`;\r\n        return (\r\n            <Tile key={key} color={this.solutionColor}\r\n                alt={(this.row + this.col) % 2 === 0}\r\n                row={this.row} col={this.col} />\r\n        );\r\n    }\r\n}\r\n","import { immerable } from \"immer\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport GridCell from \"./grid-cell\";\r\n\r\nimport type Item from \"./item\";\r\nimport type { Color } from \"../services/constants\";\r\nimport type { GridOffset } from \"../services/context\";\r\n\r\ninterface GridCellConfig {\r\n    hasTile: boolean,\r\n    tileColor?: Color,\r\n    solutionColor?: Color,\r\n    item?: Item\r\n}\r\n\r\nexport type { GridCellConfig };\r\n\r\nexport default class Grid {\r\n    [ immerable ] = true;\r\n    private cells: (GridCell | null)[][];\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(config: GridCellConfig[][]) {\r\n        this.cells = config.map((row, rowIdx) => {\r\n            return row.map((cell, colIdx) => {\r\n                return (cell.hasTile) ?\r\n                    new GridCell(\r\n                        rowIdx,\r\n                        colIdx,\r\n                        cell.tileColor,\r\n                        cell.solutionColor,\r\n                        cloneDeep(cell.item)\r\n                    ) : null;\r\n            });\r\n        });\r\n\r\n        this.height = this.cells.length;\r\n        this.width = Math.max(...this.cells.map(row => row.length));\r\n    }\r\n\r\n    // Returns GridCell if one exists at the given position\r\n    getCellAt(row: number, col: number): (GridCell | null) {\r\n        if (this.cells[row] && this.cells[row][col]) {\r\n            return this.cells[row][col];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    isGridSolved(): boolean {\r\n        for (let i = 0; i < this.cells.length; i += 1) {\r\n            for (let j = 0; j < this.cells[i].length; j += 1) {\r\n                const cellColor = this.cells[i][j]?.color ?? null;\r\n                const solutionColor = this.cells[i][j]?.solutionColor ?? null;\r\n\r\n                if (cellColor !== solutionColor) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    renderElements(\r\n        showSolution: boolean,\r\n        playerRow?: number,\r\n        playerCol?: number,\r\n        onTilePress?: (row: number, col: number) => void\r\n    ): JSX.Element[] {\r\n        const elements = [];\r\n\r\n        for (let i = 0; i < this.cells.length; i += 1) {\r\n            for (let j = 0; j < this.cells[i].length; j += 1) {\r\n                const gridCell = this.cells[i][j];\r\n\r\n                if (gridCell) {\r\n                    elements.push(...gridCell.renderElements(\r\n                        showSolution,\r\n                        playerRow,\r\n                        playerCol,\r\n                        onTilePress\r\n                    ));\r\n                }\r\n            }\r\n        }\r\n\r\n        return elements;\r\n    }\r\n\r\n    renderSolution(): JSX.Element[] {\r\n        const elements = [];\r\n\r\n        for (let i = 0; i < this.cells.length; i += 1) {\r\n            for (let j = 0; j < this.cells[i].length; j += 1) {\r\n                const gridCell = this.cells[i][j];\r\n\r\n                if (gridCell) {\r\n                    elements.push(gridCell.renderSolution());\r\n                }\r\n            }\r\n        }\r\n\r\n        return elements;\r\n    }\r\n\r\n    /**\r\n     * Calculates the x and y offset to center the grid in a given window\r\n     * @param tileSize Size of a single tile, in px\r\n     * @param windowWidth Width of the window containing the grid, in px\r\n     * @param windowHeight Height of the window containing the grid, in px\r\n     */\r\n    getCenterOffset(tileSize: number, windowWidth: number, windowHeight: number): GridOffset {\r\n        return {\r\n            x: (windowWidth - (this.width * tileSize)) / 2,\r\n            y: (windowHeight - (this.height * tileSize)) / 2\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { useResizeDetector } from 'react-resize-detector/build/withPolyfill';\r\nimport { GridOffsetContext, TileSizeContext } from \"../../services/context\";\r\nimport { DEFAULT_SOLUTION_TILE_SIZE } from \"../../services/constants\";\r\nimport \"./level-select-grid.scss\";\r\n\r\nimport type Grid from \"../../classes/grid\";\r\n\r\ninterface LevelSelectGridProps {\r\n    grid: Grid\r\n};\r\n\r\nexport default function LevelSelectGrid(props: LevelSelectGridProps) {\r\n    const { width, height, ref } = useResizeDetector({\r\n        refreshMode: \"throttle\",\r\n        refreshRate: 10\r\n    });\r\n\r\n    const offset = props.grid.getCenterOffset(DEFAULT_SOLUTION_TILE_SIZE, width ?? 0, height ?? 0);\r\n    const gridTiles = props.grid.renderSolution();\r\n\r\n    return (\r\n        <GridOffsetContext.Provider value={offset}>\r\n            <TileSizeContext.Provider value={DEFAULT_SOLUTION_TILE_SIZE}>\r\n                <div className=\"level-preview-grid\" ref={ref}>\r\n                    {gridTiles}\r\n                </div>\r\n            </TileSizeContext.Provider>\r\n        </GridOffsetContext.Provider>\r\n    );\r\n}\r\n","import { immerable } from \"immer\";\r\nimport type { Color } from \"../services/constants\";\r\n\r\nexport default abstract class Item {\r\n    [ immerable ] = true;\r\n\r\n    abstract render(row: number, col: number): JSX.Element;\r\n\r\n    // Returns the color the player would change to if they land on the item\r\n    updatePlayerColor(): (Color | null) {\r\n        return null;\r\n    }\r\n}\r\n","import { useContext, useState } from \"react\";\r\nimport { GridOffsetContext, TileSizeContext } from \"../../services/context\";\r\nimport \"./swatch.scss\";\r\nimport { Color } from \"../../services/constants\";\r\n\r\ninterface SwatchComponentProps {\r\n    color: Color,\r\n    row: number,\r\n    col: number\r\n}\r\n\r\nexport default function SwatchComponent(props: SwatchComponentProps) {\r\n    const offset = useContext(GridOffsetContext);\r\n    const tileSize = useContext(TileSizeContext);\r\n    const [ animationDelay ] = useState(Math.random() * 4);\r\n\r\n    const SWATCH_SIZE = Math.floor((tileSize * 5) / 12);\r\n    const QUARTER_DIFF = (tileSize - SWATCH_SIZE) / 2;\r\n\r\n    const colorClass = `swatch bg-${props.color}`;\r\n    const swatchStyle = {\r\n        animationDelay: `-${animationDelay}s`,\r\n        height: `${SWATCH_SIZE}px`,\r\n        left: `${(props.col * tileSize) + QUARTER_DIFF + offset.x}px`,\r\n        top: `${(props.row * tileSize) + QUARTER_DIFF + offset.y}px`,\r\n        width: `${SWATCH_SIZE}px`\r\n    };\r\n\r\n    const borderStyle = {\r\n        borderWidth: `${Math.ceil((SWATCH_SIZE * 3) / 20)}px`\r\n    }\r\n\r\n    return (\r\n        <div className={colorClass} style={swatchStyle}>\r\n            <div className=\"swatch-border\" style={borderStyle}></div>\r\n        </div>\r\n    );\r\n}\r\n","import LEVEL_SWATCHES_1 from \"./_levels/swatches-1\";\r\nimport LEVEL_SWATCHES_2 from \"./_levels/swatches-2\";\r\nimport LEVEL_SWATCHES_3 from \"./_levels/swatches-3\";\r\nimport TRICOLOR from \"./_levels/tricolor\";\r\nimport UP_THE_MIDDLE from \"./_levels/up-the-middle\";\r\nimport KEYS from \"./_levels/keys\";\r\nimport DARK_TILES_1 from \"./_levels/dark-tiles-1\";\r\nimport DARK_TILES_2 from \"./_levels/dark-tiles-2\";\r\nimport DARK_SWATCH from \"./_levels/dark-swatch\";\r\nimport type { GridCellConfig } from \"../classes/grid\";\r\n\r\nexport enum InstructionHighlightType {\r\n    PLAYER = \"player\",\r\n    TILE = \"tile\"\r\n};\r\n\r\ninterface LevelInstruction {\r\n    element: React.ReactElement,\r\n    highlight?: InstructionHighlightType,\r\n    tileRow?: number,\r\n    tileCol?: number\r\n};\r\n\r\ninterface GameConfig {\r\n    id: string,\r\n    levelName: string,\r\n    description?: React.ReactElement,\r\n    levelInstructions?: LevelInstruction[],  // Instructions that show during the level\r\n    gridConfig: GridCellConfig[][],          // Specifies layout of the grid\r\n    playerRow: number,                       // Starting row for the player\r\n    playerCol: number,                       // Starting column for the player\r\n    starRequirement3: number,                // Move requirement to get 3 stars on the level\r\n    starRequirement2: number,                // Move requirement to get 2 stars\r\n    requiredToUnlock: number                 // Number of stars required to unlock the level,\r\n};\r\n\r\nexport type { GameConfig, LevelInstruction };\r\n\r\nconst LEVELS: GameConfig[] = [\r\n    LEVEL_SWATCHES_1,\r\n    LEVEL_SWATCHES_2,\r\n    LEVEL_SWATCHES_3,\r\n    TRICOLOR,\r\n    KEYS,\r\n    UP_THE_MIDDLE,\r\n    DARK_TILES_1,\r\n    DARK_TILES_2,\r\n    DARK_SWATCH\r\n];\r\n\r\nexport default LEVELS;\r\n","import Item from \"./item\";\r\nimport SwatchComponent from \"../components/swatch\"\r\nimport { Color } from \"../services/constants\";\r\n\r\nexport default class Swatch extends Item {\r\n    color: Color;\r\n\r\n    constructor(color?: Color) {\r\n        super();\r\n        this.color = color ?? Color.DEFAULT;\r\n    }\r\n\r\n    render(row: number, col: number): JSX.Element {\r\n        const key = `swatch-${row}-${col}`;\r\n        return <SwatchComponent color={this.color} row={row} col={col} key={key} />\r\n    }\r\n\r\n    updatePlayerColor(): Color {\r\n        return this.color;\r\n    }\r\n}\r\n","import { Color } from \"../constants\";\r\nimport Swatch from \"../../classes/swatch\";\r\nimport type { GameConfig } from \"../levels\";\r\n\r\nconst LEVEL_SWATCHES_1: GameConfig = {\r\n    id: \"X08Cn2VWa0C6YvdCaTQMFw==\",\r\n    description: <p>An introduction to the game of <em>Color Coords</em>.</p>,\r\n    levelInstructions: [\r\n        {\r\n            element: (\r\n                <p>\r\n                    Welcome to <em>Color Coords</em>! The goal of the game is to color the puzzle\r\n                    grid to match the solution shown in the target window.\r\n                </p>\r\n            )\r\n        },\r\n        {\r\n            element: (\r\n                <p>\r\n                    To do so, start by moving your <strong> player piece </strong>\r\n                    across the grid. You can use either the arrow keys or by clicking on the tile\r\n                    you wish to move to. Note: you can only click on tiles in the same row or column\r\n                    as the player piece.\r\n                </p>\r\n            )\r\n        },\r\n        {\r\n            element: (\r\n                <p>\r\n                    In order to color the grid, you will need to move your player piece onto a\r\n                    <strong> swatch </strong> item. After doing so, your player piece\r\n                    will change color, giving you the ability to paint the grid as you move around.\r\n                </p>\r\n            )\r\n        },\r\n        {\r\n            element: (\r\n                <p>\r\n                    Try to solve the puzzle in the fewest moves possible. Good luck and have fun!\r\n                </p>\r\n            )\r\n        }\r\n    ],\r\n    gridConfig: [\r\n        [\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.BLUE, item: new Swatch(Color.BLUE) }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: true, solutionColor: Color.BLUE }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.RED, item: new Swatch(Color.RED) },\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.RED }\r\n        ]\r\n    ],\r\n    playerRow: 1,\r\n    playerCol: 1,\r\n    levelName: \"Swatches I\",\r\n    starRequirement3: 12,\r\n    starRequirement2: 16,\r\n    requiredToUnlock: 0\r\n};\r\n\r\nexport default LEVEL_SWATCHES_1;\r\n","import { Color } from \"../constants\";\r\nimport Swatch from \"../../classes/swatch\";\r\nimport type { GameConfig } from \"../levels\";\r\n\r\nconst LEVEL_SWATCHES_2: GameConfig = {\r\n    id: \"czdtzyW72UKVkwfmYkRCAA==\",\r\n    levelInstructions: [\r\n        {\r\n            element: (\r\n                <p>\r\n                    Tip: If you make a mistake during the puzzle, you can press the\r\n                    <strong> undo </strong> and <strong> redo </strong> buttons in the quick menu\r\n                    to go back to a previous state. Alternatively, you can use your keyboard, by\r\n                    pressing <strong> Z </strong> (to undo) or <strong> Y </strong> (to redo).\r\n                </p>\r\n            )\r\n        },\r\n        {\r\n            element: (\r\n                <p>\r\n                    If you feel like starting from the very beginning, press the restart button in\r\n                    the quick menu or press the <strong> R </strong> key on your keyboard.\r\n                </p>\r\n            )\r\n        }\r\n    ],\r\n    gridConfig: [\r\n        [\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.ORANGE }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.ORANGE },\r\n            { hasTile: true, solutionColor: Color.ORANGE },\r\n            { hasTile: true, solutionColor: Color.ORANGE }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.ORANGE, item: new Swatch(Color.ORANGE) },\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.PURPLE, item: new Swatch(Color.PURPLE) }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.PURPLE }\r\n        ]\r\n    ],\r\n    playerRow: 2,\r\n    playerCol: 2,\r\n    levelName: \"Swatches II\",\r\n    starRequirement3: 17,\r\n    starRequirement2: 20,\r\n    requiredToUnlock: 1\r\n};\r\n\r\nexport default LEVEL_SWATCHES_2;\r\n","import { Color } from \"../constants\";\r\nimport Swatch from \"../../classes/swatch\";\r\nimport type { GameConfig } from \"../levels\";\r\n\r\nconst LEVEL_SWATCHES_3: GameConfig = {\r\n    id: \"ZascZkE+A0CjlYxEmU65cQ==\",\r\n    levelInstructions: [\r\n        {\r\n            element: (\r\n                <p>\r\n                    Tip: You can <strong> re-position </strong> or <strong> zoom in/out </strong>\r\n                    on the puzzle grid. Simply drag anywhere in the puzzle area to re-position the\r\n                    grid, and press the zoom in / zoom out buttons from the quick menu to adjust the\r\n                    zoom. You can do the same in the target window as well.\r\n                </p>\r\n            )\r\n        },\r\n        {\r\n            element: (\r\n                <p>\r\n                    Additionally, you can adjust the size of the target window by dragging the\r\n                    resize handle (located in the bottom left corner of the window if playing on a\r\n                    desktop, or at the top of the window if playing on a mobile device).\r\n                </p>\r\n            )\r\n        },\r\n        {\r\n            element: (\r\n                <p>\r\n                    If you are playing on a desktop, you can also re-position the target window by\r\n                    dragging the top bar of the window.\r\n                </p>\r\n            )\r\n        }\r\n    ],\r\n    gridConfig: [\r\n        [\r\n            { hasTile: true, solutionColor: Color.GREEN, item: new Swatch(Color.GREEN) },\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.GREEN },\r\n            { hasTile: true, solutionColor: Color.GREEN },\r\n            { hasTile: true, solutionColor: Color.YELLOW, item: new Swatch(Color.YELLOW) }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.GREEN },\r\n            { hasTile: true, solutionColor: Color.GREEN },\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.YELLOW }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: false },\r\n            { hasTile: true, solutionColor: Color.GREEN },\r\n            { hasTile: true, solutionColor: Color.GREEN }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.GREEN },\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.GREEN }\r\n        ]\r\n    ],\r\n    playerRow: 3,\r\n    playerCol: 2,\r\n    levelName: \"Swatches III\",\r\n    starRequirement3: 47,\r\n    starRequirement2: 54,\r\n    requiredToUnlock: 1\r\n};\r\n\r\nexport default LEVEL_SWATCHES_3;\r\n","import { Color } from \"../constants\";\r\nimport Swatch from \"../../classes/swatch\";\r\nimport type { GameConfig } from \"../levels\";\r\n\r\nconst TRICOLOR: GameConfig = {\r\n    id: \"DwaPoAeJnkmnOGFPsUKPIw==\",\r\n    gridConfig: [\r\n        [\r\n            { hasTile: true, solutionColor: Color.YELLOW, item: new Swatch(Color.YELLOW) },\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: true, solutionColor: Color.RED, item: new Swatch(Color.RED) }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: true, solutionColor: Color.YELLOW }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.BLUE, item: new Swatch(Color.BLUE) },\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.RED }\r\n        ]\r\n    ],\r\n    playerRow: 1,\r\n    playerCol: 1,\r\n    levelName: \"Tricolor\",\r\n    starRequirement3: 17,\r\n    starRequirement2: 22,\r\n    requiredToUnlock: 3\r\n};\r\n\r\nexport default TRICOLOR;\r\n","import { Color } from \"../constants\";\r\nimport Swatch from \"../../classes/swatch\";\r\nimport type { GameConfig } from \"../levels\";\r\n\r\nconst UP_THE_MIDDLE: GameConfig = {\r\n    id: \"N93y5GKYIEW2k+16R9tSOQ==\",\r\n    gridConfig: [\r\n        [\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.RED, item: new Swatch(Color.RED) },\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.YELLOW, item: new Swatch(Color.YELLOW) },\r\n            { hasTile: true, solutionColor: Color.RED }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.YELLOW }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: false },\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: false },\r\n            { hasTile: true, solutionColor: Color.RED }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.PURPLE, item: new Swatch(Color.PURPLE) },\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.YELLOW }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.YELLOW },\r\n            { hasTile: true, solutionColor: Color.RED }\r\n        ]\r\n    ],\r\n    playerRow: 2,\r\n    playerCol: 2,\r\n    levelName: \"Up the Middle\",\r\n    starRequirement3: 76,\r\n    starRequirement2: 90,\r\n    requiredToUnlock: 3\r\n};\r\n\r\nexport default UP_THE_MIDDLE;\r\n","import { Color } from \"../constants\";\r\nimport Swatch from \"../../classes/swatch\";\r\nimport type { GameConfig } from \"../levels\";\r\n\r\nconst KEYS: GameConfig = {\r\n    id: \"TybPZyZJYEae4LbNHlbeYg==\",\r\n    gridConfig: [\r\n        [\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: true, solutionColor: Color.BLUE, item: new Swatch(Color.BLUE) },\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: false },\r\n            { hasTile: false },\r\n            { hasTile: false },\r\n            { hasTile: false }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: true, solutionColor: Color.ORANGE },\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.PURPLE },\r\n            { hasTile: true, solutionColor: Color.ORANGE }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: false },\r\n            { hasTile: true, solutionColor: Color.PURPLE, item: new Swatch(Color.PURPLE) },\r\n            { hasTile: false },\r\n            { hasTile: true, solutionColor: Color.ORANGE, item: new Swatch(Color.ORANGE) }\r\n        ]\r\n    ],\r\n    playerRow: 0,\r\n    playerCol: 0,\r\n    levelName: \"Keys\",\r\n    starRequirement3: 30,\r\n    starRequirement2: 35,\r\n    requiredToUnlock: 3\r\n};\r\n\r\nexport default KEYS;\r\n","import { Color } from \"../constants\";\r\nimport Swatch from \"../../classes/swatch\";\r\nimport type { GameConfig } from \"../levels\";\r\n\r\nconst DARK_TILES_1: GameConfig = {\r\n    id: \"mWgTHtQTikqu7J9n3kjeDg==\",\r\n    description: <p>An introduction to dark tiles.</p>,\r\n    levelInstructions: [\r\n        {\r\n            element: (\r\n                <p>\r\n                    <strong>Dark tiles </strong> cannot change colors; they will always remain\r\n                    black, even if the player pieces moves across them while in a colored state.\r\n                </p>\r\n            )\r\n        }\r\n    ],\r\n    gridConfig: [\r\n        [\r\n            { hasTile: true, solutionColor: Color.PURPLE, item: new Swatch(Color.PURPLE) },\r\n            { hasTile: true, tileColor:Color.DARK, solutionColor: Color.DARK },\r\n            { hasTile: true, solutionColor: Color.GREEN }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.ORANGE },\r\n            { hasTile: true, tileColor:Color.DARK, solutionColor: Color.DARK },\r\n            { hasTile: true, solutionColor: Color.PURPLE }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.GREEN, item: new Swatch(Color.GREEN) },\r\n            { hasTile: true, tileColor:Color.DARK, solutionColor: Color.DARK },\r\n            { hasTile: true, solutionColor: Color.ORANGE, item: new Swatch(Color.ORANGE) }\r\n        ]\r\n    ],\r\n    playerRow: 1,\r\n    playerCol: 1,\r\n    levelName: \"Dark Tiles I\",\r\n    starRequirement3: 14,\r\n    starRequirement2: 15,\r\n    requiredToUnlock: 7\r\n};\r\n\r\nexport default DARK_TILES_1;\r\n","import { Color } from \"../constants\";\r\nimport Swatch from \"../../classes/swatch\";\r\nimport type { GameConfig } from \"../levels\";\r\n\r\nconst DARK_TILES_2: GameConfig = {\r\n    id: \"6CLrD8Z0TUK3lqRrQQB/qQ==\",\r\n    gridConfig: [\r\n        [\r\n            { hasTile: true, solutionColor: Color.GREEN, item: new Swatch(Color.GREEN) },\r\n            { hasTile: true, solutionColor: Color.ORANGE },\r\n            { hasTile: true, solutionColor: Color.GREEN },\r\n            { hasTile: true, solutionColor: Color.BLUE, item: new Swatch(Color.BLUE) }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.ORANGE },\r\n            { hasTile: true, solutionColor: Color.GREEN },\r\n            { hasTile: true, solutionColor: Color.ORANGE },\r\n            { hasTile: true, solutionColor: Color.BLUE }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: true, solutionColor: Color.ORANGE },\r\n            { hasTile: true, solutionColor: Color.GREEN },\r\n            { hasTile: true, tileColor:Color.DARK, solutionColor: Color.DARK }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.ORANGE, item: new Swatch(Color.ORANGE) },\r\n            { hasTile: true, solutionColor: Color.BLUE },\r\n            { hasTile: true, tileColor:Color.DARK, solutionColor: Color.DARK },\r\n            { hasTile: true, tileColor:Color.DARK, solutionColor: Color.DARK },\r\n        ]\r\n    ],\r\n    playerRow: 1,\r\n    playerCol: 1,\r\n    levelName: \"Dark Tiles II\",\r\n    starRequirement3: 50,\r\n    starRequirement2: 60,\r\n    requiredToUnlock: 8\r\n};\r\n\r\nexport default DARK_TILES_2;\r\n","import { Color } from \"../constants\";\r\nimport Swatch from \"../../classes/swatch\";\r\nimport type { GameConfig } from \"../levels\";\r\n\r\nconst DARK_SWATCH: GameConfig = {\r\n    id: \"AZn/4XVi8EOd/qqCmO9icQ==\",\r\n    description: <p>An introduction to the dark swatch.</p>,\r\n    levelInstructions: [\r\n        {\r\n            element: (\r\n                <p>\r\n                    The <strong> dark swatch </strong> will turn the player piece black. While\r\n                    moving around in this state, the player piece will remove colors from any\r\n                    grid tile it lands on.\r\n                </p>\r\n            )\r\n        }\r\n    ],\r\n    gridConfig: [\r\n        [\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.DEFAULT },\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.RED, item: new Swatch(Color.RED) }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.DEFAULT },\r\n            { hasTile: true, solutionColor: Color.DEFAULT, item: new Swatch(Color.DARK) },\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.RED }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.DEFAULT },\r\n            { hasTile: true, solutionColor: Color.DEFAULT }\r\n        ],\r\n        [\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.RED },\r\n            { hasTile: true, solutionColor: Color.DEFAULT },\r\n            { hasTile: true, solutionColor: Color.RED }\r\n        ],\r\n    ],\r\n    playerRow: 3,\r\n    playerCol: 3,\r\n    levelName: \"Erasure\",\r\n    starRequirement3: 29,\r\n    starRequirement2: 34,\r\n    requiredToUnlock: 10\r\n};\r\n\r\nexport default DARK_SWATCH;\r\n","import { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay, faLock } from '@fortawesome/free-solid-svg-icons';\r\nimport Grid from \"../../classes/grid\";\r\nimport LevelSelectGrid from \"../level-select-grid\";\r\nimport LEVELS from \"../../services/levels\";\r\nimport Star from \"../star\";\r\nimport \"./level-preview.scss\";\r\n\r\nimport type { LevelScore } from \"../../services/definitions\";\r\nimport type { GameConfig } from \"../../services/levels\";\r\nimport { ReactElement } from \"react\";\r\n\r\ninterface LevelPreviewProps {\r\n    selectedLevel: number | null, // 1-indexed\r\n    levelScoreMap: Record<string, LevelScore>,\r\n    starsScoredOnLevel: (levelNum: number) => number,\r\n    starsToUnlockLevel: (levelNum: number) => number\r\n};\r\n\r\nconst STAR_SIZE = 16;\r\n\r\nexport function getLevelScoringTable(level: GameConfig): ReactElement {\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <span className=\"star-container\">\r\n                            <Star filled size={STAR_SIZE} />\r\n                            <Star filled={false} size={STAR_SIZE} />\r\n                            <Star filled={false} size={STAR_SIZE} />\r\n                        </span>\r\n                    </td>\r\n                    <td>{\"Complete the level\\u2026\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                            <Star filled size={STAR_SIZE} />\r\n                            <Star filled size={STAR_SIZE} />\r\n                            <Star filled={false} size={STAR_SIZE} />\r\n                    </td>\r\n                    <td>{`\\u2026in ${level.starRequirement2} or fewer moves.`}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <Star filled size={STAR_SIZE} />\r\n                        <Star filled size={STAR_SIZE} />\r\n                        <Star filled size={STAR_SIZE} />\r\n                    </td>\r\n                    <td>{`\\u2026in ${level.starRequirement3} or fewer moves.`}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport function getPersonalBestTable(starsScored:number, moves?: number): ReactElement {\r\n    const pbStars = [];\r\n    const pbMoves = (moves !== undefined && moves > 0) ? `${moves} moves` : \"-\";\r\n    for (let i = 1; i <= 3; i += 1) {\r\n        pbStars.push(\r\n            <Star filled={i <= starsScored} size={STAR_SIZE} key={`pb-star-${i}`} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <span className=\"star-container\">\r\n                            {pbStars}\r\n                        </span>\r\n                    </td>\r\n                    <td>{pbMoves}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default function LevelPreview(props: LevelPreviewProps) {\r\n    if (props.selectedLevel !== null && LEVELS[props.selectedLevel - 1]) {\r\n        const level = LEVELS[props.selectedLevel - 1];\r\n        const starsScored = props.starsScoredOnLevel(props.selectedLevel);\r\n        const toNextLevel = props.starsToUnlockLevel(props.selectedLevel);\r\n\r\n        // Level has not been unlocked\r\n        if (starsScored < 0) {\r\n            return (\r\n                <section className=\"level-preview\">\r\n                    <div className=\"locked-box\">\r\n                        <FontAwesomeIcon icon={faLock} />\r\n                    </div>\r\n                    <h2>{props.selectedLevel}. {level.levelName}</h2>\r\n                    <p className=\"unlock-text\">\r\n                        Collect a total of {level.requiredToUnlock}\r\n                        <span><Star filled size={STAR_SIZE} /></span>\r\n                        {\" to unlock this level (you need \"}\r\n                        {toNextLevel}\r\n                        <span><Star filled size={STAR_SIZE} /></span>\r\n                        {\" more).\"}\r\n                    </p>\r\n                </section>\r\n            );\r\n        }\r\n\r\n        const grid = new Grid(level.gridConfig);\r\n\r\n        return (\r\n            <section className=\"level-preview\">\r\n                <LevelSelectGrid grid={grid} />\r\n                <h2>{props.selectedLevel}. {level.levelName}</h2>\r\n                {level.description}\r\n                <Link to={`/game/${props.selectedLevel}`} className=\"play-btn\">\r\n                    <FontAwesomeIcon icon={faPlay} /> Play\r\n                </Link>\r\n\r\n                <hr />\r\n\r\n                <h3>Personal Best</h3>\r\n                {getPersonalBestTable(starsScored, props.levelScoreMap[level.id]?.moves)}\r\n\r\n                <h3>Scoring</h3>\r\n                {getLevelScoringTable(level)}\r\n            </section>\r\n        );\r\n    }\r\n\r\n    return <section className=\"level-preview\"></section>;\r\n}\r\n","import LEVELS from \"../../services/levels\";\r\nimport \"./level-select-buttons.scss\";\r\n\r\ninterface LevelSelectButtonsProps {\r\n    selectedLevel: number | null, // 1-indexed\r\n    isSelected: boolean,\r\n    setSelectedLevel: React.Dispatch<React.SetStateAction<number | null>>,\r\n    setIsSelected: React.Dispatch<React.SetStateAction<boolean>>,\r\n    containerRef: React.RefObject<HTMLElement>,\r\n    starsScoredOnLevel: (levelNum: number) => number\r\n};\r\n\r\nexport default function LevelSelectButtons(props: LevelSelectButtonsProps) {\r\n    const toggleSelected = (levelNum: number) => {\r\n        if (props.selectedLevel === levelNum) {\r\n            props.setIsSelected(!props.isSelected);\r\n        } else {\r\n            props.setIsSelected(true);\r\n            props.setSelectedLevel(levelNum);\r\n        }\r\n    }\r\n\r\n    const buttons = LEVELS.map((level, idx) => {\r\n        let btnClass = \"level-select-btn\";\r\n        const levelNum = idx + 1;\r\n        const starsScored = props.starsScoredOnLevel(levelNum);\r\n\r\n        // Button is currently being previewed\r\n        if (props.isSelected && (props.selectedLevel === levelNum)) {\r\n            btnClass += \" btn-highlight\";\r\n        }\r\n\r\n        // Gotten 3 stars on this level\r\n        else if (starsScored >= 3) {\r\n            btnClass += \" btn-star-3\";\r\n        }\r\n\r\n        // Gotten 1 or 2 stars on this level\r\n        else if (starsScored > 0) {\r\n            btnClass += \" btn-star-1\";\r\n        }\r\n\r\n        // Level not unlocked yet\r\n        else if (starsScored < 0) {\r\n            btnClass += \" btn-locked\";\r\n        }\r\n\r\n        return (\r\n            <button className={btnClass} key={`level-btn-${level.id}`}\r\n                onClick={toggleSelected.bind(null, levelNum)}\r\n                aria-label={`Toggle preview of level ${levelNum}`}>\r\n                {levelNum}\r\n            </button>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <section className=\"level-btn-container\" ref={props.containerRef}>\r\n            {buttons}\r\n        </section>\r\n    );\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay, faLock } from '@fortawesome/free-solid-svg-icons';\r\nimport Grid from \"../../classes/grid\";\r\nimport LevelSelectGrid from \"../level-select-grid\";\r\nimport Star from \"../star\";\r\nimport LEVELS from \"../../services/levels\";\r\nimport { getPersonalBestTable, getLevelScoringTable } from \"../level-preview\";\r\nimport \"./level-select-mobile.scss\";\r\n\r\nimport type { LevelScore } from \"../../services/definitions\";\r\n\r\nconst STAR_SIZE = 16;\r\n\r\ninterface LevelSelectMobileProps {\r\n    selectedLevel: number | null, // 1-indexed\r\n    isSelected: boolean,\r\n    levelScoreMap: Record<string, LevelScore>,\r\n    setSelectedLevel: React.Dispatch<React.SetStateAction<number | null>>,\r\n    setIsSelected: React.Dispatch<React.SetStateAction<boolean>>,\r\n    starsScoredOnLevel: (levelNum: number) => number,\r\n    starsToUnlockLevel: (levelNum: number) => number\r\n};\r\n\r\nexport default function LevelSelectMobile(props: LevelSelectMobileProps) {\r\n    const toggleSelected = (levelNum: number) => {\r\n        if (props.selectedLevel === levelNum) {\r\n            props.setIsSelected(!props.isSelected);\r\n        } else {\r\n            props.setIsSelected(true);\r\n            props.setSelectedLevel(levelNum);\r\n        }\r\n    }\r\n\r\n    const buttons = LEVELS.map((level, idx) => {\r\n        let btnClass = \"level-select-mobile-btn\";\r\n        const levelNum = idx + 1;\r\n        const starsScored = props.starsScoredOnLevel(levelNum);\r\n\r\n        // Button is currently being previewed\r\n        if (props.isSelected && (props.selectedLevel === levelNum)) {\r\n            btnClass += \" btn-highlight\";\r\n        }\r\n\r\n        // Gotten 3 stars on this level\r\n        else if (starsScored >= 3) {\r\n            btnClass += \" btn-star-3\";\r\n        }\r\n\r\n        // Gotten 1 or 2 stars on this level\r\n        else if (starsScored > 0) {\r\n            btnClass += \" btn-star-1\";\r\n        }\r\n\r\n        // Level not unlocked yet\r\n        else if (starsScored < 0) {\r\n            btnClass += \" btn-locked\";\r\n        }\r\n\r\n        // Level preview\r\n        let levelPreview = null;\r\n        if (starsScored < 0) {\r\n            const toNextLevel = props.starsToUnlockLevel(levelNum);\r\n            let className = \"level-preview-mobile level-preview-locked\";\r\n            className += (props.isSelected && (props.selectedLevel === levelNum)) ?\r\n                \" preview-open\" : \"\";\r\n\r\n            levelPreview = (\r\n                <section className={className}>\r\n                    <div className=\"level-preview-padding\">\r\n                        <div className=\"locked-box\">\r\n                            <FontAwesomeIcon icon={faLock} />\r\n                        </div>\r\n                        <p className=\"unlock-text\">\r\n                            Collect a total of {level.requiredToUnlock}\r\n                            <span><Star filled size={STAR_SIZE} /></span>\r\n                            {\" to unlock this level (you need \"}\r\n                            {toNextLevel}\r\n                            <span><Star filled size={STAR_SIZE} /></span>\r\n                            {\" more).\"}\r\n                        </p>\r\n                    </div>\r\n                </section>\r\n            );\r\n        } else {\r\n            const grid = new Grid(level.gridConfig);\r\n            let className = \"level-preview-mobile\";\r\n            className += (props.isSelected && (props.selectedLevel === levelNum)) ?\r\n                \" preview-open\" : \"\";\r\n\r\n            levelPreview = (\r\n                <section className={className}>\r\n                    <div className=\"level-preview-padding\">\r\n                        <LevelSelectGrid grid={grid} />\r\n                        {level.description}\r\n                        <Link to={`/game/${props.selectedLevel}`} className=\"play-btn\">\r\n                            <FontAwesomeIcon icon={faPlay} /> Play\r\n                        </Link>\r\n\r\n                        <hr />\r\n\r\n                        <h3>Personal Best</h3>\r\n                        {getPersonalBestTable(starsScored, props.levelScoreMap[level.id]?.moves)}\r\n\r\n                        <h3>Scoring</h3>\r\n                        {getLevelScoringTable(level)}\r\n                    </div>\r\n                </section>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div key={`level-btn-mobile-${level.id}`}>\r\n                <button className={btnClass}\r\n                    onClick={toggleSelected.bind(null, levelNum)}\r\n                    aria-label={`Toggle preview of level ${levelNum}`}>\r\n                    <h2>{levelNum}. {level.levelName}</h2>\r\n                </button>\r\n                {levelPreview}\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <main className=\"level-select-mobile\">\r\n            {buttons}\r\n        </main>\r\n    );\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport LevelSelectTopBar from \"../level-select-top-bar\";\r\nimport LevelPreview from \"../level-preview\";\r\nimport LevelSelectButtons from \"../level-select-buttons\";\r\nimport LevelSelectMobile from \"../level-select-mobile\";\r\nimport \"./level-select.scss\";\r\n\r\nimport type { MouseEvent } from \"react\";\r\nimport type { LevelScore } from \"../../services/definitions\";\r\n\r\ninterface LevelSelectProps {\r\n    starCount: number,\r\n    levelScoreMap: Record<string, LevelScore>,\r\n    starsScoredOnLevel: (levelNum: number) => number,\r\n    starsToUnlockLevel: (levelNum: number) => number\r\n};\r\n\r\nexport default function LevelSelect(props: LevelSelectProps) {\r\n    const [selectedLevel, setSelectedLevel] = useState<number | null>(null);\r\n    const [isSelected, setIsSelected] = useState<boolean>(false);\r\n\r\n    // Handler to close the level preview if user clicks outside\r\n    const btnContainerRef = useRef<HTMLElement>(null);\r\n    const onBtnContainerClick = function (event: MouseEvent) {\r\n        event.preventDefault();\r\n        if (event.target === btnContainerRef.current) {\r\n            setIsSelected(false);\r\n        }\r\n    };\r\n\r\n    const mainClassName = isSelected ? \"level-select-main level-selected\" : \"level-select-main\";\r\n    return (\r\n        <div className=\"level-select\">\r\n            <LevelSelectTopBar starCount={props.starCount} />\r\n            <main className={mainClassName} onClick={onBtnContainerClick}>\r\n                <LevelSelectButtons selectedLevel={selectedLevel} isSelected={isSelected}\r\n                    setSelectedLevel={setSelectedLevel} setIsSelected={setIsSelected}\r\n                    containerRef={btnContainerRef} starsScoredOnLevel={props.starsScoredOnLevel} />\r\n                <LevelPreview selectedLevel={selectedLevel}\r\n                    levelScoreMap={props.levelScoreMap}\r\n                    starsScoredOnLevel={props.starsScoredOnLevel}\r\n                    starsToUnlockLevel={props.starsToUnlockLevel} />\r\n            </main>\r\n\r\n            <LevelSelectMobile selectedLevel={selectedLevel} isSelected={isSelected}\r\n                    setSelectedLevel={setSelectedLevel} setIsSelected={setIsSelected}\r\n                    starsScoredOnLevel={props.starsScoredOnLevel}\r\n                    levelScoreMap={props.levelScoreMap}\r\n                    starsToUnlockLevel={props.starsToUnlockLevel} />\r\n        </div>\r\n    );\r\n}\r\n","import { useState, useContext, useEffect } from \"react\";\r\nimport { usePrevious } from \"../../services/hooks\";\r\nimport { easeQuadInOut } from \"d3-ease\";\r\nimport { GridOffsetContext, TileSizeContext } from \"../../services/context\";\r\nimport { Color } from \"../../services/constants\";\r\nimport \"./player.scss\";\r\n\r\nconst ANIM_FRAMES = 70;\r\nconst ANIM_INTERVAL = 5;\r\n\r\ninterface PlayerProps {\r\n    color?: Color,\r\n    row: number,\r\n    col: number,\r\n    movementToggle: boolean,\r\n    onAnimationEnd: Function\r\n}\r\n\r\nexport default function PlayerComponent(props: PlayerProps) {\r\n    const { row, col, movementToggle } = props;\r\n    const [rowPosition, setRowPosition] = useState(row);\r\n    const [colPosition, setColPosition] = useState(col);\r\n    const offset = useContext(GridOffsetContext);\r\n    const tileSize = useContext(TileSizeContext);\r\n    const prevProps = usePrevious({ row, col });\r\n\r\n    const PLAYER_SIZE = (tileSize * 5) / 6;\r\n    const QUARTER_DIFF = (tileSize - PLAYER_SIZE) / 2;\r\n\r\n    useEffect(() => {\r\n        // Only animate player movement if it's toggled on and we have an initial starting position\r\n        if (movementToggle && prevProps) {\r\n            let frameCount = 0;\r\n\r\n            const interval = setInterval(() => {\r\n                if (frameCount > ANIM_FRAMES) {\r\n                    clearInterval(interval);\r\n                    props.onAnimationEnd();\r\n                } else {\r\n                    frameCount += 1;\r\n                    const increment = easeQuadInOut(frameCount / ANIM_FRAMES);\r\n                    setRowPosition(prevProps.row + ((row - prevProps.row) * increment));\r\n                    setColPosition(prevProps.col + ((col - prevProps.col) * increment));\r\n                }\r\n            }, ANIM_INTERVAL);\r\n        } else {\r\n            setRowPosition(row);\r\n            setColPosition(col);\r\n        }\r\n\r\n    }, [ row, col, movementToggle ]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const color = props.color ?? Color.DEFAULT;\r\n    const colorClass = `player-color bg-${color}`;\r\n    const borderWidth = Math.ceil(tileSize / 12);\r\n\r\n    const playerStyle = {\r\n        borderRadius: `${PLAYER_SIZE}px`,\r\n        borderWidth: `${borderWidth}px`,\r\n        height: `${PLAYER_SIZE}px`,\r\n        left: `${(colPosition * tileSize) + QUARTER_DIFF + offset.x}px`,\r\n        top: `${(rowPosition * tileSize) + QUARTER_DIFF + offset.y}px`,\r\n        width: `${PLAYER_SIZE}px`\r\n    };\r\n\r\n    const playerBodyStyle = {\r\n        borderRadius: `${PLAYER_SIZE}px`,\r\n        borderWidth: `${borderWidth}px`,\r\n    };\r\n\r\n    return (\r\n        <div className=\"player\" style={playerStyle}>\r\n            <div className={colorClass} style={playerBodyStyle}></div>\r\n            <div className=\"player-border\" style={playerBodyStyle}></div>\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect, useRef } from \"react\";\r\nimport type { MutableRefObject } from 'react';\r\n\r\n/**\r\n * Credit: https://gist.github.com/btoo/65e7d4303f49299c785d38f8758525e6\r\n */\r\nexport function usePrevious<T> (value: T): MutableRefObject<T | undefined>['current'] {\r\n    const ref = useRef<T>();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    }, [ value ]);\r\n\r\n    return ref.current;\r\n  }\r\n","/**\r\n * Returns promise that resolves after ms milliseconds\r\n */\r\nexport function sleep(ms: number) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\r\n\r\nexport function getBoundValue(val: number, upperBound: number, lowerBound: number) {\r\n    return Math.min(Math.max(lowerBound, val), upperBound);\r\n\r\n}\r\n\r\nexport function isInElementById(node: (HTMLElement | null), id: string): boolean {\r\n    while (node) {\r\n        if (node?.id === id) {\r\n            return true;\r\n        }\r\n\r\n        node = node.parentElement;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import { useState, useEffect, useContext } from \"react\";\r\nimport { useResizeDetector } from 'react-resize-detector/build/withPolyfill';\r\nimport PlayerComponent from \"../player\";\r\nimport { GridOffsetContext, TileSizeContext } from \"../../services/context\";\r\nimport { sleep, getBoundValue } from \"../../services/util\";\r\nimport {\r\n    DEFAULT_SOLUTION_CONTAINER_SIZE,\r\n    TOP_MENU_HEIGHT,\r\n    GAME_MOBILE_WIDTH\r\n} from \"../../services/constants\";\r\nimport \"./grid.scss\";\r\n\r\nimport type Grid from \"../../classes/grid\";\r\nimport type { Color } from \"../../services/constants\";\r\nimport type { PointerEvent } from \"react\";\r\n\r\nconst DRAG_THRESHOLD = 100;\r\nconst MIN_DRAG_X_PCT = -0.5;\r\nconst MAX_DRAG_X_PCT = 0.5;\r\nconst MIN_DRAG_Y_PCT = -0.5;\r\nconst MAX_DRAG_Y_PCT = 0.5;\r\n\r\ninterface GridProps {\r\n    grid: Grid,\r\n    playerRow: number,\r\n    playerCol: number,\r\n    playerColor: Color,\r\n    levelNumber: number,\r\n    showSolution: boolean,\r\n    isPlayerMoving: boolean,\r\n    shouldResetLayout: boolean,\r\n    onPlayerAnimationEnd: () => void,\r\n    onTilePress: (row: number, col: number) => void,\r\n    dragHandler: (bool: boolean) => void,\r\n    onGridSizeChange: (width?: number, height?: number) => void\r\n}\r\n\r\nexport default function GridComponent(props: GridProps) {\r\n    const [ isPointerDown, setIsPointerDown ] = useState(false);\r\n    const [ isDragging, setIsDragging ] = useState(false);\r\n    const [ distanceDragged, setDistanceDragged ] = useState(0);\r\n    const [ lastPointerX, setLastPointerX] = useState(0);\r\n    const [ lastPointerY, setLastPointerY] = useState(0);\r\n    const [ offsetPctX, setOffsetPctX ] = useState(0);\r\n    const [ offsetPctY, setOffsetPctY ] = useState(0);\r\n    const [ hasInitialOffset, setHasInitialOffset ] = useState(false);\r\n    const tileSize = useContext(TileSizeContext);\r\n\r\n    const { width, height, ref } = useResizeDetector({\r\n        refreshMode: \"throttle\",\r\n        refreshRate: 10\r\n    });\r\n\r\n    // Start with grid in the center\r\n    const offset = props.grid.getCenterOffset(tileSize, width ?? 0, height ?? 0);\r\n\r\n    // Add draggable offset\r\n    offset.x += (offsetPctX * (width ?? 0));\r\n    offset.y += (offsetPctY * (height ?? 0));\r\n\r\n    const setInitialOffset = () => {\r\n        // Do not do anything if resize detector has not started\r\n        if (!width || !height) {\r\n            return;\r\n        }\r\n\r\n        setOffsetPctY(TOP_MENU_HEIGHT / (2 * height));\r\n\r\n        if (width < GAME_MOBILE_WIDTH) {\r\n            setOffsetPctX(0);\r\n        } else {\r\n            // Account for solution container if we are in desktop view\r\n            setOffsetPctX((-DEFAULT_SOLUTION_CONTAINER_SIZE) / (2 * width));\r\n        }\r\n\r\n        setHasInitialOffset(true);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        // Call grid size handler\r\n        props.onGridSizeChange(width, height);\r\n\r\n        // Do not continue if we've already set the offset\r\n        if (hasInitialOffset) {\r\n            return;\r\n        }\r\n\r\n        // Otherwise default offset percentage after we have the width and height of the container\r\n        setInitialOffset();\r\n    }, [ width, height ]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // Reset to default offset percentage after we switch to a new level\r\n    useEffect(() => {\r\n        setInitialOffset();\r\n    }, [ props.levelNumber ]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // Reset to default offset percentage if the reset layout button was pressed\r\n    useEffect(() => {\r\n        if (props.shouldResetLayout) {\r\n            setInitialOffset();\r\n        }\r\n    }, [ props.shouldResetLayout ]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const gridElements = props.isPlayerMoving ? props.grid.renderElements(props.showSolution) :\r\n        props.grid.renderElements(\r\n            props.showSolution,\r\n            props.playerRow,\r\n            props.playerCol,\r\n            props.onTilePress\r\n        );\r\n\r\n    const onPointerDown = (event: PointerEvent): void => {\r\n        setIsPointerDown(true);\r\n        setDistanceDragged(0);\r\n        setIsDragging(false);\r\n        setLastPointerX(event.clientX);\r\n        setLastPointerY(event.clientY);\r\n    };\r\n\r\n    const onPointerMove = (event: PointerEvent): void => {\r\n        // Do not process unless the pointer is pressed down\r\n        if (!isPointerDown) {\r\n            return;\r\n        }\r\n\r\n        const distX = Math.abs(event.clientX - lastPointerX);\r\n        const distY = Math.abs(event.clientY - lastPointerY);\r\n        const totalDist = distanceDragged + (distX ** 2) + (distY ** 2);\r\n\r\n        setDistanceDragged(totalDist);\r\n\r\n        // Process drag if enough distance has been moved\r\n        if (isDragging || totalDist >= DRAG_THRESHOLD) {\r\n            setIsDragging(true);\r\n            props.dragHandler(true);\r\n            ref.current && ref.current.setPointerCapture(event.pointerId);\r\n\r\n            // Set the offset\r\n            let nextOffsetPctX = offsetPctX + ((event.clientX - lastPointerX) / (width || 1));\r\n            nextOffsetPctX = getBoundValue(nextOffsetPctX, MAX_DRAG_X_PCT, MIN_DRAG_X_PCT);\r\n\r\n            let nextOffsetPctY = offsetPctY + ((event.clientY - lastPointerY) / (height || 1));\r\n            nextOffsetPctY = getBoundValue(nextOffsetPctY, MAX_DRAG_Y_PCT, MIN_DRAG_Y_PCT);\r\n\r\n            setOffsetPctX(nextOffsetPctX);\r\n            setOffsetPctY(nextOffsetPctY);\r\n\r\n            // Set last pointer coordinates\r\n            setLastPointerX(event.clientX);\r\n            setLastPointerY(event.clientY);\r\n        }\r\n    };\r\n\r\n    const onPointerUp = async (event: PointerEvent) => {\r\n        const wasDragging = isDragging;\r\n\r\n        setIsPointerDown(false);\r\n        setDistanceDragged(0);\r\n        setIsDragging(false);\r\n        ref.current && ref.current.releasePointerCapture(event.pointerId);\r\n\r\n        // Release the drag on the following cycle\r\n        if (wasDragging) {\r\n            await sleep(0);\r\n        }\r\n\r\n        props.dragHandler(false);\r\n    };\r\n\r\n    const gridContainerProps: Record<string, any> = {\r\n        className: `tile-grid ${isDragging ? \"grid-dragging\" : \"\"}`,\r\n        ref,\r\n        onPointerDown,\r\n        onPointerUp\r\n    };\r\n\r\n    if (isPointerDown) {\r\n        gridContainerProps.onPointerMove = onPointerMove;\r\n    }\r\n\r\n    return (\r\n        <GridOffsetContext.Provider value={offset}>\r\n            <div {...gridContainerProps}>\r\n\r\n                { gridElements }\r\n                <PlayerComponent color={props.playerColor} row={props.playerRow}\r\n                    col={props.playerCol} movementToggle={props.isPlayerMoving}\r\n                    onAnimationEnd={props.onPlayerAnimationEnd} />\r\n            </div>\r\n        </GridOffsetContext.Provider>\r\n    );\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faThLarge,\r\n    faQuestionCircle,\r\n    faCog,\r\n    faSync,\r\n    faInfoCircle\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport \"./game-menu.scss\";\r\n\r\ninterface GameMenuProps {\r\n    isOpen: boolean,\r\n    setOpen: (isOpen: boolean) => void,\r\n    showSettings: () => void,\r\n    showInstructions: () => void,\r\n    resetLayout: () => void,\r\n    startTutorial?: () => void\r\n}\r\n\r\nexport default function GameMenu(props: GameMenuProps) {\r\n    const openClass = props.isOpen ? \"game-menu-open\" : \"game-menu-closed\";\r\n    const overlayClass = `game-menu-overlay ${openClass}`;\r\n    const navClass = `game-menu-nav ${openClass}`;\r\n    const tabIndex = props.isOpen ? 0 : -1;\r\n\r\n    const onResetLayoutClick = () => {\r\n        props.resetLayout();\r\n        props.setOpen(false);\r\n    };\r\n\r\n    const onViewTutorial = () => {\r\n        if (!props.startTutorial) {\r\n            return;\r\n        }\r\n\r\n        props.startTutorial();\r\n        props.setOpen(false);\r\n    };\r\n\r\n    // TODO: Add settings button back in once there are more in-game settings\r\n    const settingsBtn = (\r\n        <button className=\"game-menu-btn\" tabIndex={tabIndex}\r\n            onClick={props.showSettings}>\r\n            <FontAwesomeIcon icon={faCog} />\r\n            <span>Settings</span>\r\n        </button>\r\n    );\r\n\r\n    const tutorialBtn = props.startTutorial ? (\r\n        <button className=\"game-menu-btn\" tabIndex={tabIndex} onClick={onViewTutorial}>\r\n            <FontAwesomeIcon icon={faInfoCircle} />\r\n            <span>View Tutorial</span>\r\n        </button>\r\n    ): null;\r\n\r\n    return (\r\n        <div className=\"game-menu\">\r\n            <div className={overlayClass} onClick={props.setOpen.bind(null, false)}></div>\r\n            <nav className={navClass}>\r\n                <Link to=\"/level-select\" tabIndex={tabIndex}\r\n                    className=\"game-menu-btn game-menu-first\">\r\n                    <FontAwesomeIcon icon={faThLarge} />\r\n                    <span>Level Select</span>\r\n                </Link>\r\n                <button className=\"game-menu-btn\" tabIndex={tabIndex}\r\n                    onClick={props.showInstructions}>\r\n                    <FontAwesomeIcon icon={faQuestionCircle} />\r\n                    <span>How to Play</span>\r\n                </button>\r\n                {tutorialBtn}\r\n                <button className=\"game-menu-btn game-menu-last\" tabIndex={tabIndex}\r\n                    onClick={onResetLayoutClick}>\r\n                    <FontAwesomeIcon icon={faSync} />\r\n                    <span>Reset Layout</span>\r\n                </button>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n","import { Turn as Hamburger } from \"hamburger-react\";\r\nimport \"./game-top-bar.scss\";\r\n\r\ninterface GameTopBarProps {\r\n    isMenuOpen: boolean,\r\n    setMenuOpen: (isOpen: boolean) => void,\r\n    levelNumber: number,\r\n    levelName: string,\r\n    movesTaken: number\r\n}\r\n\r\nexport default function GameTopBar(props: GameTopBarProps) {\r\n    return (\r\n        <header className=\"top-bar game-top-bar\">\r\n            <div className=\"hamburger-btn\">\r\n                <Hamburger toggled={props.isMenuOpen} onToggle={props.setMenuOpen} rounded\r\n                    size={24} label=\"Toggle menu\" hideOutline={false}></Hamburger>\r\n            </div>\r\n            <div className=\"game-level\">\r\n                <h1 className=\"top-bar-text\">{props.levelNumber}. {props.levelName}</h1>\r\n            </div>\r\n            <div className=\"moves-taken\">\r\n                <span className=\"top-bar-text\">Moves: {props.movesTaken}</span>\r\n            </div>\r\n            <div className=\"clearfix\"></div>\r\n        </header>\r\n    );\r\n}\r\n","import GameMenu from \"../game-menu\";\r\nimport GameTopBar from \"../game-top-bar\";\r\nimport \"./game-hud.scss\";\r\n\r\ninterface GameHUDProps {\r\n    movesTaken: number,\r\n    levelNumber: number,\r\n    levelName: string,\r\n    isMenuOpen: boolean,\r\n    setMenuOpen: (isOpen: boolean) => void,\r\n    showSettings: () => void,\r\n    showInstructions: () => void,\r\n    resetLayout: () => void,\r\n    startTutorial?: () => void\r\n}\r\n\r\nexport default function GameHUD(props: GameHUDProps) {\r\n    return (\r\n        <div className=\"game-hud\">\r\n            <GameTopBar isMenuOpen={props.isMenuOpen}\r\n                setMenuOpen={props.setMenuOpen}\r\n                levelNumber={props.levelNumber}\r\n                levelName={props.levelName}\r\n                movesTaken={props.movesTaken} />\r\n            <GameMenu\r\n                isOpen={props.isMenuOpen}\r\n                setOpen={props.setMenuOpen}\r\n                showSettings={props.showSettings}\r\n                showInstructions={props.showInstructions}\r\n                resetLayout={props.resetLayout}\r\n                startTutorial={props.startTutorial} />\r\n        </div>\r\n    );\r\n}\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSync, faThLarge, faPlay, faLock } from '@fortawesome/free-solid-svg-icons';\r\nimport { Link } from \"react-router-dom\";\r\nimport Star from \"../star\";\r\nimport LEVELS from \"../../services/levels\";\r\nimport \"./game-complete.scss\";\r\n\r\ninterface GameCompleteProps {\r\n    levelNumber: number,\r\n    stars: number,\r\n    restartHandler: () => void,\r\n    starsScoredOnLevel: (levelNum: number) => number,\r\n    starsToUnlockLevel: (levelNum: number) => number\r\n};\r\n\r\nconst STAR_SIZE = 50;\r\nconst STAR_TEXT_SIZE = 16;\r\n\r\nexport default function GameComplete(props: GameCompleteProps) {\r\n    let nextBtn = null;\r\n    let nextUnlockElement = null;\r\n    let starText = null;\r\n\r\n    if (LEVELS[props.levelNumber]) {\r\n        const level = LEVELS[props.levelNumber];\r\n\r\n        if (props.starsScoredOnLevel(props.levelNumber + 1) >= 0) {\r\n            nextBtn = (\r\n                <Link to={`/game/${props.levelNumber + 1}`} className=\"level-complete-btn\">\r\n                    <FontAwesomeIcon icon={faPlay} /> Next Level\r\n                </Link>\r\n            );\r\n        } else {\r\n            const toNextLevel = props.starsToUnlockLevel(props.levelNumber + 1);\r\n            nextUnlockElement = (\r\n                <p className=\"level-complete-unlock-text\">\r\n                    Collect a total of {level.requiredToUnlock}\r\n                    <span><Star filled size={STAR_TEXT_SIZE} /></span>\r\n                    {\" to unlock the next level (you need \"}\r\n                    {toNextLevel}\r\n                    <span><Star filled size={STAR_TEXT_SIZE} /></span>\r\n                    {\" more).\"}\r\n                </p>\r\n            );\r\n\r\n            nextBtn = (\r\n                <button className=\"level-complete-btn locked-next-btn\">\r\n                    <FontAwesomeIcon icon={faLock} /> Next Level\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n\r\n    if (LEVELS[props.levelNumber - 1] && props.stars < 3) {\r\n        const level = LEVELS[props.levelNumber - 1];\r\n        starText = (\r\n            <div className=\"level-complete-3s-text\">\r\n                Complete the puzzle in <strong>{level.starRequirement3}</strong> moves to earn a 3\r\n                <span><Star filled size={STAR_TEXT_SIZE} /></span> {\" score.\"}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const stars = [];\r\n    for (let i = 1; i <= 3; i += 1) {\r\n        stars.push(\r\n            <Star filled={i <= props.stars} className={`level-complete-star lcs-${i}`}\r\n                size={STAR_SIZE} key={`lcs-${i}`} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"level-complete\">\r\n            <div className=\"level-complete-main\">\r\n                <div className=\"level-complete-star-container\">\r\n                    {stars}\r\n                </div>\r\n                <div className=\"level-complete-msg\">Puzzle Completed!</div>\r\n                {starText}\r\n                <div className=\"level-complete-btn-container\">\r\n                    <Link to=\"/level-select\" className=\"level-complete-btn\">\r\n                        <FontAwesomeIcon icon={faThLarge} /> Level Select\r\n                    </Link>\r\n                    <button className=\"level-complete-btn\" onClick={props.restartHandler}>\r\n                        <FontAwesomeIcon icon={faSync} /> Restart\r\n                    </button>\r\n                    {nextBtn}\r\n                </div>\r\n                {nextUnlockElement}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { useContext } from \"react\";\r\nimport { GridOffsetContext, TileSizeContext } from \"../../services/context\";\r\nimport \"./solution-player-cursor.scss\";\r\n\r\nexport default function SolutionPlayerCursor(props: { row: number, col: number }) {\r\n    const offset = useContext(GridOffsetContext);\r\n    const tileSize = useContext(TileSizeContext);\r\n\r\n    const cursorStyle = {\r\n        height: `${tileSize}px`,\r\n        left: `${(props.col * tileSize) + offset.x}px`,\r\n        top: `${(props.row * tileSize) + offset.y}px`,\r\n        width: `${tileSize}px`\r\n    };\r\n\r\n    const cornerStyle = {\r\n        borderWidth: Math.floor((tileSize * 3) / 20),\r\n        height: Math.floor(tileSize / 5),\r\n        width: Math.floor(tileSize / 5),\r\n    };\r\n\r\n    return (\r\n        <div className=\"solution-player-cursor\" style={cursorStyle}>\r\n            <div className=\"cursor-corner cursor-corner-top-left\" style={cornerStyle}></div>\r\n            <div className=\"cursor-corner cursor-corner-top-right\" style={cornerStyle}></div>\r\n            <div className=\"cursor-corner cursor-corner-bottom-left\" style={cornerStyle}></div>\r\n            <div className=\"cursor-corner cursor-corner-bottom-right\" style={cornerStyle}></div>\r\n        </div>\r\n    );\r\n}\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearchPlus, faSearchMinus } from '@fortawesome/free-solid-svg-icons';\r\nimport \"./solution-adjust-menu.scss\";\r\n\r\ninterface SolutionAdjustMenuProps {\r\n    canZoomIn: boolean,\r\n    canZoomOut: boolean,\r\n    zoomInHandler: () => void,\r\n    zoomOutHandler: () => void\r\n}\r\n\r\nexport default function SolutionAdjustMenu(props: SolutionAdjustMenuProps) {\r\n    const zoomInClass = `adjust-btn ${!props.canZoomIn ? \" adjust-disabled\" : \"\"}`;\r\n    const zoomOutClass = `adjust-btn ${!props.canZoomOut ? \" adjust-disabled\" : \"\"}`;\r\n\r\n    return (\r\n        <div id=\"solution-adjust-menu\" className=\"adjust-menu solution-adjust-menu\">\r\n            <div className={zoomInClass}>\r\n                <button tabIndex={0} onClick={props.zoomInHandler} aria-label=\"Zoom in\">\r\n                    <FontAwesomeIcon icon={faSearchPlus} />\r\n                </button>\r\n\r\n                <div className=\"adjust-tooltip\">Zoom In</div>\r\n            </div>\r\n\r\n            <div className={zoomOutClass}>\r\n                <button tabIndex={0} onClick={props.zoomOutHandler} aria-label=\"Zoom out\">\r\n                    <FontAwesomeIcon icon={faSearchMinus} />\r\n                </button>\r\n\r\n                <div className=\"adjust-tooltip\">Zoom Out</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport { Resizable } from \"react-resizable\";\r\nimport { useResizeDetector } from 'react-resize-detector/build/withPolyfill';\r\nimport { GridOffsetContext, TileSizeContext } from \"../../services/context\";\r\nimport { getBoundValue, isInElementById } from \"../../services/util\";\r\nimport SolutionPlayerCursor from \"../solution-player-cursor\";\r\nimport SolutionAdjustMenu from \"../solution-adjust-menu\";\r\nimport {\r\n    TILES_SIZES,\r\n    DEFAULT_SOLUTION_TILE_SIZE,\r\n    DEFAULT_SOLUTION_CONTAINER_SIZE,\r\n    TOP_MENU_HEIGHT,\r\n    GAME_MOBILE_WIDTH\r\n} from \"../../services/constants\";\r\nimport \"./solution.scss\";\r\n\r\nimport type Grid from \"../../classes/grid\";\r\nimport type { SyntheticEvent } from \"react\";\r\nimport type { ResizeCallbackData } from \"react-resizable\";\r\n\r\nconst MIN_GRID_DRAG_X_PCT = -0.5;\r\nconst MAX_GRID_DRAG_X_PCT = 0.5;\r\nconst MIN_GRID_DRAG_Y_PCT = -0.5;\r\nconst MAX_GRID_DRAG_Y_PCT = 0.5;\r\nconst DEFAULT_TILE_SIZE_INDEX = 2;\r\nconst DEFAULT_CONTAINER_OFFSET = 4;\r\nconst MIN_CONTAINER_SIZE = 100;\r\nconst MAX_CONTAINER_SIZE = 500;\r\nconst CONTAINER_LEFT_ADJUST = 12;\r\nconst CONTAINER_BOTTOM_ADJUST = TOP_MENU_HEIGHT + 36;\r\nconst DEFAULT_MOBILE_HEIGHT_PCT = 0.35;\r\nconst MAX_MOBILE_HEIGHT_PCT = 0.8;\r\nconst MIN_MOBILE_HEIGHT = 35;\r\n\r\ninterface SolutionProps {\r\n    grid: Grid,\r\n    playerRow: number,\r\n    playerCol: number,\r\n    levelNumber: number,\r\n    shouldResetLayout: boolean,\r\n    gameOver: boolean,\r\n    isMenuOpen: boolean,\r\n    gridWidth?: number,\r\n    gridHeight?: number,\r\n    appHeight?: number\r\n};\r\n\r\nfunction getBoundedContainerOffsetPctX(\r\n    offsetPct: number,\r\n    solutionWidth?: number,\r\n    gridWidth?: number\r\n): number {\r\n    if (!solutionWidth || !gridWidth) {\r\n        return 0;\r\n    }\r\n\r\n    const minOffset = -(DEFAULT_CONTAINER_OFFSET / gridWidth);\r\n    const maxOffset = Math.max(minOffset,\r\n        (gridWidth - solutionWidth - CONTAINER_LEFT_ADJUST) / gridWidth);\r\n    return getBoundValue(offsetPct, maxOffset, minOffset);\r\n}\r\n\r\nfunction getBoundedContainerOffsetPctY(\r\n    offsetPct: number,\r\n    solutionHeight?: number,\r\n    gridHeight?: number\r\n): number {\r\n    if (!solutionHeight || !gridHeight) {\r\n        return 0;\r\n    }\r\n\r\n    const minOffset = -(DEFAULT_CONTAINER_OFFSET / gridHeight);\r\n    const maxOffset = Math.max(minOffset,\r\n        (gridHeight - solutionHeight - CONTAINER_BOTTOM_ADJUST) / gridHeight);\r\n    return getBoundValue(offsetPct, maxOffset, minOffset);\r\n}\r\n\r\nfunction getContainerOffsetX(offsetPct: number, gridWidth?: number): number {\r\n    if (!gridWidth) {\r\n        return DEFAULT_CONTAINER_OFFSET;\r\n    }\r\n\r\n    return DEFAULT_CONTAINER_OFFSET + (offsetPct * gridWidth);\r\n}\r\n\r\nfunction getContainerOffsetY(offsetPct: number, gridHeight?: number): number {\r\n    if (!gridHeight) {\r\n        return DEFAULT_CONTAINER_OFFSET;\r\n    }\r\n\r\n    return DEFAULT_CONTAINER_OFFSET + TOP_MENU_HEIGHT + (offsetPct * gridHeight);\r\n}\r\n\r\nfunction getProperContainerSize(\r\n    width: number,\r\n    height: number,\r\n    offsetPctX: number,\r\n    offsetPctY: number,\r\n    gridWidth: number,\r\n    gridHeight: number\r\n): { width: number, height: number } {\r\n    const offsetX = getContainerOffsetX(offsetPctX, gridWidth);\r\n    const offsetY = getContainerOffsetY(offsetPctY, gridHeight);\r\n\r\n    // TODO: Find a better way to find the max sizes, if possible\r\n    const maxContainerWidth = gridWidth - offsetX - 8;\r\n    const maxContainerHeight = gridHeight - offsetY - 32;\r\n\r\n    return {\r\n        width: Math.max(Math.min(width, maxContainerWidth), MIN_CONTAINER_SIZE),\r\n        height: Math.max(Math.min(height, maxContainerHeight), MIN_CONTAINER_SIZE)\r\n    };\r\n}\r\n\r\nexport default function Solution(props: SolutionProps) {\r\n    // Sizes\r\n    const [ tileSizeIndex, setTileSizeIndex ] = useState(DEFAULT_TILE_SIZE_INDEX);\r\n    const [ containerWidth, setContainerWidth ] = useState(DEFAULT_SOLUTION_CONTAINER_SIZE);\r\n    const [ containerHeight, setContainerHeight ] = useState(DEFAULT_SOLUTION_CONTAINER_SIZE);\r\n    const [ mobileHeightPct, setMobileHeightPct ] = useState(DEFAULT_MOBILE_HEIGHT_PCT);\r\n\r\n    // Pointer position\r\n    const [ lastPointerX, setLastPointerX] = useState(0);\r\n    const [ lastPointerY, setLastPointerY] = useState(0);\r\n\r\n    // Grid offset\r\n    const [ isGridPointerDown, setIsGridPointerDown ] = useState(false);\r\n    const [ gridOffsetPctX, setGridOffsetPctX ] = useState(0);\r\n    const [ gridOffsetPctY, setGridOffsetPctY ] = useState(0);\r\n\r\n    // Container offset\r\n    const [ isContainerPointerDown, setIsContainerPointerDown ] = useState(false);\r\n    const [ containerOffsetPctX, setContainerOffsetPctX ] = useState(0);\r\n    const [ containerOffsetPctY, setContainerOffsetPctY ] = useState(0);\r\n\r\n    const { width, height, ref } = useResizeDetector({\r\n        refreshMode: \"throttle\",\r\n        refreshRate: 10\r\n    });\r\n\r\n    const tileSize = TILES_SIZES[tileSizeIndex] ?? DEFAULT_SOLUTION_TILE_SIZE;\r\n    const offset = props.grid.getCenterOffset(tileSize, width ?? 0, height ?? 0);\r\n    const solutionTopRef = useRef<HTMLElement>(null);\r\n    const isInMobileView = props.gridWidth !== undefined && props.gridWidth < GAME_MOBILE_WIDTH;\r\n\r\n    // Add draggable offset\r\n    offset.x += (gridOffsetPctX * (width ?? 0));\r\n    offset.y += (gridOffsetPctY * (height ?? 0));\r\n\r\n    const onResetLayout = () => {\r\n        setGridOffsetPctX(0);\r\n        setGridOffsetPctY(0);\r\n        setTileSizeIndex(DEFAULT_TILE_SIZE_INDEX);\r\n        setContainerWidth(DEFAULT_SOLUTION_CONTAINER_SIZE);\r\n        setContainerHeight(DEFAULT_SOLUTION_CONTAINER_SIZE);\r\n        setContainerOffsetPctX(0);\r\n        setContainerOffsetPctY(0);\r\n        setMobileHeightPct(DEFAULT_MOBILE_HEIGHT_PCT);\r\n    };\r\n\r\n    // Reset to default offset and zoom after we switch to a new level\r\n    useEffect(() => {\r\n        onResetLayout();\r\n    }, [ props.levelNumber ]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // Reset to default offset if the reset layout button was pressed\r\n    useEffect(() => {\r\n        if (props.shouldResetLayout) {\r\n            onResetLayout();\r\n        }\r\n    }, [ props.shouldResetLayout ]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // Make sure the solution is not offscreen when the viewport is resized\r\n    useEffect(() => {\r\n\r\n        // Not needed in mobile view\r\n        if (isInMobileView) {\r\n            return;\r\n        }\r\n\r\n        const offsetPctX = getBoundedContainerOffsetPctX(containerOffsetPctX, containerWidth,\r\n            props.gridWidth);\r\n        const offsetPctY = getBoundedContainerOffsetPctY(containerOffsetPctY, containerHeight,\r\n                props.gridHeight);\r\n\r\n        setContainerOffsetPctX(offsetPctX);\r\n        setContainerOffsetPctY(offsetPctY);\r\n\r\n        if (props.gridWidth && props.gridHeight) {\r\n            const size = getProperContainerSize(containerWidth, containerHeight, offsetPctX,\r\n                offsetPctY, props.gridWidth, props.gridHeight);\r\n\r\n            setContainerWidth(size.width);\r\n            setContainerHeight(size.height);\r\n        }\r\n    }, [ props.gridWidth, props.gridHeight ]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // Make sure the mobile solution is still visible after viewport height changes\r\n    useEffect(() => {\r\n        if (!props.appHeight) {\r\n            return;\r\n        }\r\n\r\n        let pct = getBoundValue(mobileHeightPct, MAX_MOBILE_HEIGHT_PCT,\r\n            MIN_MOBILE_HEIGHT / props.appHeight);\r\n        setMobileHeightPct(pct);\r\n    }, [ props.appHeight ]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // Grid dragging handlers\r\n    const onGridPointerDown = (event: PointerEvent): void => {\r\n\r\n        // Do not start dragging if we clicked on the adjustment menu\r\n        if (isInElementById(event.target as HTMLElement, \"solution-adjust-menu\")) {\r\n            return;\r\n        }\r\n\r\n        setIsGridPointerDown(true);\r\n        setLastPointerX(event.clientX);\r\n        setLastPointerY(event.clientY);\r\n        ref.current && ref.current.setPointerCapture(event.pointerId);\r\n    };\r\n\r\n    const onGridPointerMove = (event: PointerEvent): void => {\r\n        // Do not process unless the pointer is pressed down\r\n        if (!isGridPointerDown) {\r\n            return;\r\n        }\r\n\r\n        // Set the offset\r\n        let nextOffsetPctX = gridOffsetPctX + ((event.clientX - lastPointerX) / (width || 1));\r\n        nextOffsetPctX = getBoundValue(nextOffsetPctX, MAX_GRID_DRAG_X_PCT, MIN_GRID_DRAG_X_PCT);\r\n\r\n        let nextOffsetPctY = gridOffsetPctY + ((event.clientY - lastPointerY) / (height || 1));\r\n        nextOffsetPctY = getBoundValue(nextOffsetPctY, MAX_GRID_DRAG_Y_PCT, MIN_GRID_DRAG_Y_PCT);\r\n\r\n        setGridOffsetPctX(nextOffsetPctX);\r\n        setGridOffsetPctY(nextOffsetPctY);\r\n\r\n        // Set last pointer coordinates\r\n        setLastPointerX(event.clientX);\r\n        setLastPointerY(event.clientY);\r\n    };\r\n\r\n    const onGridPointerUp = async (event: PointerEvent) => {\r\n        setIsGridPointerDown(false);\r\n        ref.current && ref.current.releasePointerCapture(event.pointerId);\r\n    };\r\n\r\n    // Solution container dragging handlers\r\n    const onContainerPointerDown = (event: PointerEvent): void => {\r\n\r\n        // Not needed in mobile view\r\n        if (isInMobileView) {\r\n            return;\r\n        }\r\n\r\n        setIsContainerPointerDown(true);\r\n        setLastPointerX(event.clientX);\r\n        setLastPointerY(event.clientY);\r\n        solutionTopRef.current && solutionTopRef.current.setPointerCapture(event.pointerId);\r\n    };\r\n\r\n    const onContainerPointerMove = (event: PointerEvent): void => {\r\n        // Do not process unless the pointer is pressed down\r\n        if (!isContainerPointerDown || isInMobileView) {\r\n            return;\r\n        }\r\n\r\n        // Set the offset\r\n\r\n        // Reverse the x delta since we apply the offset to the right, not left\r\n        let nextOffsetPctX = containerOffsetPctX -\r\n            ((event.clientX - lastPointerX) / (props.gridWidth || 1));\r\n        nextOffsetPctX = getBoundedContainerOffsetPctX(nextOffsetPctX, containerWidth,\r\n            props.gridWidth);\r\n\r\n        let nextOffsetPctY = containerOffsetPctY +\r\n            ((event.clientY - lastPointerY) / (props.gridHeight || 1));\r\n        nextOffsetPctY = getBoundedContainerOffsetPctY(nextOffsetPctY, containerHeight,\r\n            props.gridHeight);\r\n\r\n        setContainerOffsetPctX(nextOffsetPctX);\r\n        setContainerOffsetPctY(nextOffsetPctY);\r\n\r\n        // Set last pointer coordinates\r\n        setLastPointerX(event.clientX);\r\n        setLastPointerY(event.clientY);\r\n    };\r\n\r\n    const onContainerPointerUp = async (event: PointerEvent) => {\r\n        setIsContainerPointerDown(false);\r\n        solutionTopRef.current && solutionTopRef.current.releasePointerCapture(event.pointerId);\r\n    };\r\n\r\n    const canAdjust = !props.gameOver && !props.isMenuOpen;\r\n    const canZoomIn = tileSizeIndex < TILES_SIZES.length - 1;\r\n    const canZoomOut = tileSizeIndex > 0;\r\n\r\n    const zoomIn = (): void => {\r\n        if (canZoomIn && canAdjust) {\r\n            setTileSizeIndex(tileSizeIndex + 1);\r\n        }\r\n    };\r\n\r\n    const zoomOut = (): void => {\r\n        if (canZoomOut && canAdjust) {\r\n            setTileSizeIndex(tileSizeIndex - 1);\r\n        }\r\n    };\r\n\r\n    const onResize = (event: SyntheticEvent, data: ResizeCallbackData) => {\r\n        let newWidth = data.size.width;\r\n        let newHeight = data.size.height;\r\n\r\n        if (props.gridWidth && props.gridHeight) {\r\n            const size = getProperContainerSize(newWidth, newHeight,\r\n                containerOffsetPctX, containerOffsetPctY, props.gridWidth, props.gridHeight);\r\n\r\n            newWidth = size.width;\r\n            newHeight = size.height;\r\n        }\r\n\r\n        setContainerWidth(newWidth);\r\n        setContainerHeight(newHeight);\r\n    };\r\n\r\n    const onMobileResize = (event: SyntheticEvent, data: ResizeCallbackData) => {\r\n        if (props.appHeight) {\r\n            let pct = data.size.height / props.appHeight;\r\n            pct = getBoundValue(pct, MAX_MOBILE_HEIGHT_PCT, MIN_MOBILE_HEIGHT / props.appHeight);\r\n            setMobileHeightPct(pct);\r\n        }\r\n    };\r\n\r\n    // Solution grid props\r\n    const solutionProps: Record<string, any> = {\r\n        className: \"solution\",\r\n        ref,\r\n        onPointerDown: onGridPointerDown,\r\n        onPointerUp: onGridPointerUp\r\n    };\r\n\r\n    if (!isInMobileView) {\r\n        solutionProps.style = {\r\n            height: `${containerHeight}px`,\r\n            width: `${containerWidth}px`\r\n        };\r\n    }\r\n\r\n    if (isGridPointerDown) {\r\n        solutionProps.onPointerMove = onGridPointerMove;\r\n    }\r\n\r\n    // Solution top bar props\r\n    let topBarClassName = \"solution-target-text\";\r\n    topBarClassName += !isInMobileView ? \" solution-draggable\" : \"\";\r\n    const topBarProps: Record<string, any> = {\r\n        className: topBarClassName,\r\n        ref: solutionTopRef,\r\n        onPointerDown: onContainerPointerDown,\r\n        onPointerUp: onContainerPointerUp\r\n    };\r\n\r\n    if (isContainerPointerDown) {\r\n        topBarProps.onPointerMove = onContainerPointerMove;\r\n    }\r\n\r\n    // Container style\r\n    const containerStyle: Record<string, any> = {};\r\n    const mHeight = props.appHeight ? props.appHeight * mobileHeightPct : MIN_MOBILE_HEIGHT;\r\n    if (!isInMobileView) {\r\n        containerStyle.right = getContainerOffsetX(containerOffsetPctX, props.gridWidth);\r\n        containerStyle.top = getContainerOffsetY(containerOffsetPctY, props.gridHeight);\r\n    } else {\r\n        containerStyle.height = `${mHeight}px`;\r\n    }\r\n\r\n    // Solution grid\r\n    const solutionTiles = props.grid.renderSolution();\r\n\r\n    // Build the solution element\r\n    let solutionElement = (\r\n        <div className=\"solution-container\" style={containerStyle}>\r\n            <span {...topBarProps}>Target</span>\r\n            <div {...solutionProps}>\r\n                <SolutionAdjustMenu\r\n                    canZoomIn={canZoomIn}\r\n                    canZoomOut={canZoomOut}\r\n                    zoomInHandler={zoomIn}\r\n                    zoomOutHandler={zoomOut} />\r\n                {solutionTiles}\r\n                <SolutionPlayerCursor row={props.playerRow} col={props.playerCol} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Add resizable\r\n    if (!isInMobileView) {\r\n        solutionElement = (\r\n            <Resizable height={containerHeight} width={containerWidth} onResize={onResize}\r\n                minConstraints={[MIN_CONTAINER_SIZE, MIN_CONTAINER_SIZE]}\r\n                maxConstraints={[MAX_CONTAINER_SIZE, MAX_CONTAINER_SIZE]}\r\n                resizeHandles={[ \"sw\" ]}>\r\n                {solutionElement}\r\n            </Resizable>\r\n        );\r\n    } else {\r\n        const maxSize = props.appHeight ?\r\n            Math.max(props.appHeight * MAX_MOBILE_HEIGHT_PCT, MIN_MOBILE_HEIGHT) :\r\n            MAX_CONTAINER_SIZE;\r\n        solutionElement = (\r\n            <Resizable axis=\"y\" width={0} height={mHeight} onResize={onMobileResize}\r\n                minConstraints={[0, MIN_MOBILE_HEIGHT]}\r\n                maxConstraints={[Infinity, maxSize]}\r\n                resizeHandles={[ \"n\" ]}>\r\n                {solutionElement}\r\n            </Resizable>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <GridOffsetContext.Provider value={offset}>\r\n            <TileSizeContext.Provider value={tileSize}>\r\n                {solutionElement}\r\n            </TileSizeContext.Provider>\r\n        </GridOffsetContext.Provider>\r\n    );\r\n}\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faSync,\r\n    faUndoAlt,\r\n    faRedoAlt,\r\n    faSearchPlus,\r\n    faSearchMinus\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport \"./game-adjust-menu.scss\";\r\n\r\ninterface GameAdjustMenuProps {\r\n    canUndo: boolean,\r\n    canRedo: boolean,\r\n    canZoomIn: boolean,\r\n    canZoomOut: boolean,\r\n    undoHandler: () => void,\r\n    redoHandler: () => void,\r\n    restartHandler: () => void,\r\n    zoomInHandler: () => void,\r\n    zoomOutHandler: () => void\r\n}\r\n\r\nexport default function GameAdjustMenu(props: GameAdjustMenuProps) {\r\n    const undoClass = `adjust-btn ${!props.canUndo ? \" adjust-disabled\" : \"\"}`;\r\n    const redoClass = `adjust-btn ${!props.canRedo ? \" adjust-disabled\" : \"\"}`;\r\n    const zoomInClass = `adjust-btn ${!props.canZoomIn ? \" adjust-disabled\" : \"\"}`;\r\n    const zoomOutClass = `adjust-btn ${!props.canZoomOut ? \" adjust-disabled\" : \"\"}`;\r\n\r\n    return (\r\n        <div className=\"adjust-menu game-adjust-menu\">\r\n            <div className=\"adjust-btn\">\r\n                <button tabIndex={0} onClick={props.restartHandler} aria-label=\"Restart game\">\r\n                    <FontAwesomeIcon icon={faSync} />\r\n                </button>\r\n\r\n                <div className=\"adjust-tooltip\">Restart</div>\r\n            </div>\r\n\r\n            <div className=\"adjust-separator\"></div>\r\n\r\n            <div className={undoClass}>\r\n                <button tabIndex={0} onClick={props.undoHandler} aria-label=\"Undo\">\r\n                    <FontAwesomeIcon icon={faUndoAlt} />\r\n                </button>\r\n\r\n                <div className=\"adjust-tooltip\">Undo</div>\r\n            </div>\r\n\r\n            <div className={redoClass}>\r\n                <button tabIndex={0} onClick={props.redoHandler} aria-label=\"Redo\">\r\n                    <FontAwesomeIcon icon={faRedoAlt} />\r\n                </button>\r\n\r\n                <div className=\"adjust-tooltip\">Redo</div>\r\n            </div>\r\n\r\n            <div className=\"adjust-separator\"></div>\r\n\r\n            <div className={zoomInClass}>\r\n                <button tabIndex={0} onClick={props.zoomInHandler} aria-label=\"Zoom in\">\r\n                    <FontAwesomeIcon icon={faSearchPlus} />\r\n                </button>\r\n\r\n                <div className=\"adjust-tooltip\">Zoom In</div>\r\n            </div>\r\n\r\n            <div className={zoomOutClass}>\r\n                <button tabIndex={0} onClick={props.zoomOutHandler} aria-label=\"Zoom out\">\r\n                    <FontAwesomeIcon icon={faSearchMinus} />\r\n                </button>\r\n\r\n                <div className=\"adjust-tooltip\">Zoom Out</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport \"./settings.scss\";\r\n\r\ninterface SettingsProps {\r\n    visible: boolean,\r\n    onEraseData?: () => void,\r\n    onGoBack: () => void\r\n};\r\n\r\nexport default function Settings(props: SettingsProps) {\r\n    const [ showEraseConfirm, setShowEraseConfirm ] = useState(false);\r\n\r\n    const className = `settings ${props.visible ? \"settings-enabled\" : \"\"}`;\r\n\r\n    const backOnClick = () => {\r\n        setShowEraseConfirm(false);\r\n        props.onGoBack();\r\n    }\r\n\r\n    const onEraseConfirm = () => {\r\n        props.onEraseData && props.onEraseData();\r\n        setShowEraseConfirm(false);\r\n    };\r\n\r\n    let eraseElement = null;\r\n    if (props.onEraseData) {\r\n        let eraseConfirm = null;\r\n        if (showEraseConfirm) {\r\n            eraseConfirm = (\r\n                <div>\r\n                    <p>\r\n                        {\"Are you sure you want to continue. If yes, your save data will be \"}\r\n                        <strong>permanently</strong> erased.\r\n                    </p>\r\n                    <button className=\"erase-confirm-btn erase-continue\" onClick={onEraseConfirm}>\r\n                        Continue\r\n                    </button>\r\n                    <button className=\"erase-confirm-btn erase-cancel\"\r\n                        onClick={setShowEraseConfirm.bind(null, false)}>\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        eraseElement = (\r\n            <div className=\"settings-erase\">\r\n                <h2>Save Data</h2>\r\n                <button onClick={setShowEraseConfirm.bind(null, true)}>Erase save data?</button>\r\n                {eraseConfirm}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <header className=\"top-bar settings-top-bar\">\r\n                <button className=\"top-bar-text back-btn\" aria-label=\"Go back\"\r\n                    onClick={backOnClick}>\r\n                    <FontAwesomeIcon icon={faArrowLeft} />\r\n                </button>\r\n                <div className=\"level-select-title\">\r\n                    <h1 className=\"top-bar-text\">Settings</h1>\r\n                </div>\r\n                <div className=\"clearfix\"></div>\r\n            </header>\r\n\r\n            <main className=\"settings-main\">\r\n                <section className=\"settings-section\">\r\n                    {eraseElement}\r\n                </section>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport \"./instructions.scss\";\r\n\r\ninterface InstructionsProps {\r\n    visible: boolean,\r\n    onGoBack: () => void\r\n};\r\n\r\nexport default function Instructions(props: InstructionsProps) {\r\n    const className = `instructions ${props.visible ? \"instructions-enabled\" : \"\"}`;\r\n\r\n    // TODO: Make each section collapsible\r\n    return (\r\n        <div className={className}>\r\n            <header className=\"top-bar instructions-top-bar\">\r\n                <button className=\"top-bar-text back-btn\" aria-label=\"Go back\"\r\n                    onClick={props.onGoBack}>\r\n                    <FontAwesomeIcon icon={faArrowLeft} />\r\n                </button>\r\n                <div className=\"level-select-title\">\r\n                    <h1 className=\"top-bar-text\">How to Play</h1>\r\n                </div>\r\n                <div className=\"clearfix\"></div>\r\n            </header>\r\n\r\n            <main className=\"instructions-main\">\r\n                <section className=\"instructions-section\">\r\n                    <h2>Objective</h2>\r\n                    <p>\r\n                        The goal for any level in <em> Color Coords </em> is to color the puzzle\r\n                        grid so that it matches the grid shown in the target window. In order to\r\n                        color the puzzle grid, you must move of the\r\n                        <em className=\"highlight\"> player piece </em> across the grid. As you move\r\n                        the player piece across the grid, you may land on tiles that contain an\r\n                        <em className=\"highlight\"> item</em>. Find the solution to each puzzle\r\n                        by maneuvering the player piece and utilizing any items placed on the grid.\r\n                    </p>\r\n\r\n                    <h2>Gameplay</h2>\r\n\r\n                    <h3>Player Piece</h3>\r\n                    <p>\r\n                        The <em> player piece </em> moves across the board, one tile at a time. It\r\n                        can move either <em className=\"highlight\"> up, down, left or right</em>.\r\n                        At the start of the game, the piece starts in an\r\n                        <em className=\"highlight\"> uncolored state</em>. While in this state,\r\n                        the player piece does not affect the puzzle grid in any way. With the help\r\n                        of items, you can change the state of the player piece to color the grid.\r\n                    </p>\r\n\r\n                    <h3>Items</h3>\r\n                    <p>Items are used to alter the puzzle grid and/or the player piece.</p>\r\n\r\n                    <div className=\"table-container\">\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Type</th>\r\n                                    <th>Description</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Color Swatch</td>\r\n                                    <td>\r\n                                        This item changes the color of the player piece to the same\r\n                                        color as the swatch. While the player piece is colored,\r\n                                        <em className=\"highlight\"> it will color any tile that it\r\n                                        lands on</em>.\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Dark Swatch</td>\r\n                                    <td>\r\n                                        This item turns the player piece black. While the player piece\r\n                                        is in this state, it will\r\n                                        <em className=\"highlight\"> erase color </em>\r\n                                        from any grid tile it lands on.\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <h3>Tiles</h3>\r\n                    <p>\r\n                        The puzzle grid is made up of <em> tiles</em>. There are several different\r\n                        types of tiles, each with its own properties.\r\n                    </p>\r\n\r\n                    <div className=\"table-container\">\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Type</th>\r\n                                    <th>Description</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Default Tile</td>\r\n                                    <td>\r\n                                        Default tiles start off white and\r\n                                        <em className=\"highlight\"> can be colored </em> by the\r\n                                        player piece if they happen to land on the tile while in a\r\n                                        colored state.\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Dark Tile</td>\r\n                                    <td>\r\n                                        Dark tiles are black and <em className=\"highlight\"> cannot\r\n                                        be changed to a different color </em> even if the player\r\n                                        piece lands on it while in a colored state.\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <h2>Stars</h2>\r\n                    <p>\r\n                        After completing a level, you will be rewarded with up to three stars. You\r\n                        will earn at least one star for each level completed. To earn two or three\r\n                        stars on a level, you must complete the level within a certain amount of\r\n                        moves. <em className=\"highlight\"> In general, the fewer moves you use to\r\n                        complete a level, the more stars you will receive. </em> Check the\r\n                        <em> level select </em> screen for the required number of moves required to\r\n                        each additional stars for each level.\r\n                    </p>\r\n\r\n                    <h2>Controls</h2>\r\n                    <div className=\"table-container\">\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Action</th>\r\n                                    <th>Keyboard</th>\r\n                                    <th>Mouse</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Player Piece Movement</td>\r\n                                    <td>Arrow keys</td>\r\n                                    <td>Left click on tile</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Toggle Target</td>\r\n                                    <td>Q (hold)</td>\r\n                                    <td>-</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Undo</td>\r\n                                    <td>Z</td>\r\n                                    <td>-</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Redo</td>\r\n                                    <td>Y</td>\r\n                                    <td>-</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Restart</td>\r\n                                    <td>R</td>\r\n                                    <td>-</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Toggle Game Menu</td>\r\n                                    <td>Escape</td>\r\n                                    <td>-</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Reposition Grid/Target</td>\r\n                                    <td>-</td>\r\n                                    <td>Left click (drag)</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <h2>Miscellaneous</h2>\r\n                    <ul>\r\n                        <li>\r\n                            If you want to adjust the layout of the game, you can\r\n                            <em className=\"highlight\"> reposition </em> the puzzle grid and/or the\r\n                            target window by dragging the screen with your cursor. For the target,\r\n                            you can reposition both the target window, as well as the target grid\r\n                            within the window. You can also\r\n                            <em className=\"highlight\"> zoom in or out </em> using the zoom buttons\r\n                            in the quick menus. If you want to reset back to the default layout, go\r\n                            into the game menu and select\r\n                            <em className=\"highlight\"> Reset Layout</em>.\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport \"./game-tutorial.scss\";\r\nimport type { LevelInstruction } from \"../../services/levels\";\r\n\r\ninterface GameTutorialProps {\r\n    levelInstructions: LevelInstruction[],\r\n    isMenuOpen: boolean,\r\n    onComplete: () => void\r\n}\r\n\r\nexport default function GameTutorial(props: GameTutorialProps) {\r\n    const [ currentInstruction, setCurrentInstruction ] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (currentInstruction >= props.levelInstructions.length) {\r\n            props.onComplete();\r\n        }\r\n    }, [currentInstruction]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onNext = () => {\r\n        if (props.isMenuOpen) {\r\n            return;\r\n        }\r\n\r\n        setCurrentInstruction(currentInstruction + 1);\r\n    };\r\n\r\n    const onPrevious = () => {\r\n        if (props.isMenuOpen) {\r\n            return;\r\n        }\r\n\r\n        setCurrentInstruction(currentInstruction - 1);\r\n    };\r\n\r\n    const onSkip = () => {\r\n        if (props.isMenuOpen) {\r\n            return;\r\n        }\r\n\r\n        setCurrentInstruction(props.levelInstructions.length);\r\n    };\r\n\r\n    if (currentInstruction >= props.levelInstructions.length || currentInstruction < 0) {\r\n        return null;\r\n    }\r\n\r\n    const child = props.levelInstructions[currentInstruction].element;\r\n    const canGoPrevious = currentInstruction > 0;\r\n    const canSkip = currentInstruction < props.levelInstructions.length - 1;\r\n\r\n    const prevBtn = canGoPrevious ?\r\n        (<button className=\"game-tutorial-btn left-btn\" onClick={onPrevious}>Previous</button>) :\r\n        null;\r\n    const skipBtn = canSkip ?\r\n        (<button className=\"game-tutorial-btn right-btn skip-btn\" onClick={onSkip}>Skip</button>) :\r\n        null;\r\n    const nextText = currentInstruction < props.levelInstructions.length - 1 ? \"Next\" : \"Finish\";\r\n\r\n    return (\r\n        <div className=\"game-tutorial\">\r\n            {child}\r\n            <div className=\"game-tutorial-btn-container\">\r\n                {prevBtn}\r\n                {skipBtn}\r\n                <button className=\"game-tutorial-btn right-btn\" onClick={onNext}>{nextText}</button>\r\n                <div className=\"clearfix\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { Color, DIR_OFFSET } from \"../services/constants\";\r\nimport type Grid from \"./grid\";\r\nimport type GridCell from \"./grid-cell\";\r\nimport type { Direction } from \"../services/constants\";\r\n\r\ninterface PlayerMovement {\r\n    currentDirection: (Direction | null),\r\n    prevDirection: (Direction | null)\r\n}\r\n\r\ninterface PlayerMovementResult {\r\n    moved: boolean,\r\n    newRow: number,\r\n    newCol: number,\r\n    newColor: Color,\r\n    directionMoved?: Direction,\r\n    gridCellMovedTo?: GridCell\r\n}\r\n\r\nexport type { PlayerMovement };\r\n\r\nexport default class Player {\r\n    row: number;\r\n    col: number;\r\n    grid: Grid;\r\n    color: Color;\r\n\r\n    constructor(row: number, col: number, grid: Grid, color?: Color) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.grid = grid;\r\n        this.color = color ?? Color.DEFAULT;\r\n    }\r\n\r\n    move(movement: PlayerMovement): PlayerMovementResult {\r\n        if (movement.currentDirection) {\r\n            const { rowOffset, colOffset } = DIR_OFFSET[movement.currentDirection];\r\n            const nextRow = this.row + rowOffset;\r\n            const nextCol = this.col + colOffset;\r\n            const gridCell = this.grid.getCellAt(nextRow, nextCol);\r\n\r\n            if (gridCell) {\r\n                this.row = nextRow;\r\n                this.col = nextCol;\r\n\r\n                // Change the player color if possible\r\n                let nextPlayerColor;\r\n                if (gridCell.item && (nextPlayerColor = gridCell.item.updatePlayerColor())) {\r\n                    this.color = nextPlayerColor;\r\n                }\r\n\r\n                return {\r\n                    moved: true,\r\n                    newRow: this.row,\r\n                    newCol: this.col,\r\n                    newColor: this.color,\r\n                    directionMoved: movement.currentDirection,\r\n                    gridCellMovedTo: gridCell\r\n                };\r\n            }\r\n        }\r\n\r\n        return {\r\n            moved: false,\r\n            newRow: this.row,\r\n            newCol: this.col,\r\n            newColor: this.color\r\n        };\r\n    }\r\n}\r\n","import type Grid from \"./grid\";\r\nimport type { Color } from \"../services/constants\";\r\n\r\nconst HISTORY_LIMIT = 60;\r\n\r\ninterface GameHistoryState {\r\n    grid: Grid;\r\n    playerRow: number;\r\n    playerCol: number;\r\n    playerColor: Color;\r\n};\r\n\r\nclass GameHistoryNode {\r\n    grid: Grid;\r\n    playerRow: number;\r\n    playerCol: number;\r\n    playerColor: Color;\r\n    previous: (GameHistoryNode | null) = null;\r\n    next: (GameHistoryNode | null) = null;\r\n\r\n    constructor (grid: Grid, playerRow: number, playerCol: number, playerColor: Color) {\r\n        this.grid = grid;\r\n        this.playerRow = playerRow;\r\n        this.playerCol = playerCol;\r\n        this.playerColor = playerColor;\r\n    }\r\n};\r\n\r\nclass GameHistoryDoublyLinkedList {\r\n    private start: (GameHistoryNode | null) = null;\r\n    private end: (GameHistoryNode | null) = null;\r\n    private _size: number = 0;\r\n\r\n    get size(): number {\r\n        return this._size;\r\n    }\r\n\r\n    push(grid: Grid, playerRow: number, playerCol: number, playerColor: Color): GameHistoryNode {\r\n        const node = new GameHistoryNode(grid, playerRow, playerCol, playerColor);\r\n        this._size += 1;\r\n\r\n        // If there is no end node, then there is no node in the list\r\n        if (!this.end) {\r\n            this.start = this.end = node;\r\n        }\r\n\r\n        // Otherwise, just add normally\r\n        else {\r\n            node.previous = this.end;\r\n            this.end.next = node;\r\n            this.end = node;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    pop(): (GameHistoryNode | null) {\r\n\r\n        // No nodes in the list\r\n        if (!this.end) {\r\n            return null\r\n        }\r\n\r\n        // Only one node in the list\r\n        if (this.start === this.end) {\r\n            const node = this.end;\r\n            this.start = this.end = null;\r\n            this._size -= 1;\r\n\r\n            return node;\r\n        }\r\n\r\n        // Otherwise, pop the end and set the second last end node to be the new end node\r\n        const node = this.end;\r\n        this.end = this.end.previous; // Move second last end node to end\r\n\r\n        this.end && (this.end.next = null); // Remove reference to popped node\r\n        this._size -= 1;\r\n\r\n        return node;\r\n    }\r\n\r\n    unshift(grid: Grid, playerRow: number, playerCol: number, playerColor: Color): GameHistoryNode {\r\n        const node = new GameHistoryNode(grid, playerRow, playerCol, playerColor);\r\n        this._size += 1;\r\n\r\n        // If there is no start node, then there is no node in the list\r\n        if (!this.start) {\r\n            this.start = this.end = node;\r\n        }\r\n\r\n        // Otherwise, just add normally\r\n        else {\r\n            node.next = this.start;\r\n            this.start.previous = node;\r\n            this.start = node;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    shift(): (GameHistoryNode | null) {\r\n\r\n        // No nodes in the list\r\n        if (!this.start) {\r\n            return null\r\n        }\r\n\r\n        // Only one node in the list\r\n        if (this.start === this.end) {\r\n            const node = this.start;\r\n            this.start = this.end = null;\r\n            this._size -= 1;\r\n\r\n            return node;\r\n        }\r\n\r\n        // Otherwise, shift the first element and set the second node to be the new start node\r\n        const node = this.start;\r\n        this.start = this.start.next; // Move second node to start\r\n\r\n        this.start && (this.start.previous = null); // Remove reference to shifted node\r\n        this._size -= 1;\r\n\r\n        return node;\r\n    }\r\n\r\n    clear(): void {\r\n        this.start = null;\r\n        this.end = null;\r\n        this._size = 0;\r\n    }\r\n}\r\n\r\nexport default class GameHistory {\r\n    private undoHistory: GameHistoryDoublyLinkedList;\r\n    private redoHistory: GameHistoryDoublyLinkedList;\r\n    private currentState: GameHistoryState;\r\n\r\n    constructor(grid: Grid, playerRow: number, playerCol: number, playerColor: Color) {\r\n        this.undoHistory = new GameHistoryDoublyLinkedList();\r\n        this.redoHistory = new GameHistoryDoublyLinkedList();\r\n        this.currentState = { grid, playerRow, playerCol, playerColor };\r\n    }\r\n\r\n    get size(): number {\r\n        return this.undoHistory.size + this.redoHistory.size;\r\n    }\r\n\r\n    push(grid: Grid, playerRow: number, playerCol: number, playerColor: Color): void {\r\n        // Push current state onto undo history\r\n        this.undoHistory.push(\r\n            this.currentState.grid,\r\n            this.currentState.playerRow,\r\n            this.currentState.playerCol,\r\n            this.currentState.playerColor\r\n        );\r\n\r\n        // Replace current state with new state\r\n        this.currentState.grid = grid;\r\n        this.currentState.playerRow = playerRow;\r\n        this.currentState.playerCol = playerCol;\r\n        this.currentState.playerColor = playerColor;\r\n\r\n        // Clear any states in the redo history if we add a new state\r\n        this.redoHistory.clear();\r\n\r\n        // If we're over the limit, shift states from the beginning\r\n        while (this.size > HISTORY_LIMIT) {\r\n            this.undoHistory.shift();\r\n        }\r\n    }\r\n\r\n    undo(): (GameHistoryState | null) {\r\n        if (!this.canUndo()) {\r\n            return null;\r\n        }\r\n\r\n        // Otherwise pop from undo history\r\n        const undoNode = this.undoHistory.pop();\r\n\r\n        // Push current state onto redo history\r\n        this.redoHistory.push(\r\n            this.currentState.grid,\r\n            this.currentState.playerRow,\r\n            this.currentState.playerCol,\r\n            this.currentState.playerColor\r\n        );\r\n\r\n        // Update current state and return\r\n        if (undoNode) {\r\n            this.currentState.grid = undoNode.grid;\r\n            this.currentState.playerRow = undoNode.playerRow;\r\n            this.currentState.playerCol = undoNode.playerCol;\r\n            this.currentState.playerColor = undoNode.playerColor;\r\n\r\n            return {\r\n                grid: undoNode.grid,\r\n                playerRow: undoNode.playerRow,\r\n                playerCol: undoNode.playerCol,\r\n                playerColor: undoNode.playerColor,\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    redo(): (GameHistoryState | null) {\r\n        if (!this.canRedo()) {\r\n            return null;\r\n        }\r\n\r\n        // Otherwise pop from redo history\r\n        const redoNode = this.redoHistory.pop();\r\n\r\n        // Push current state onto undo history\r\n        this.undoHistory.push(\r\n            this.currentState.grid,\r\n            this.currentState.playerRow,\r\n            this.currentState.playerCol,\r\n            this.currentState.playerColor\r\n        );\r\n\r\n        if (redoNode) {\r\n            this.currentState.grid = redoNode.grid;\r\n            this.currentState.playerRow = redoNode.playerRow;\r\n            this.currentState.playerCol = redoNode.playerCol;\r\n            this.currentState.playerColor = redoNode.playerColor;\r\n\r\n            return {\r\n                grid: redoNode.grid,\r\n                playerRow: redoNode.playerRow,\r\n                playerCol: redoNode.playerCol,\r\n                playerColor: redoNode.playerColor,\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    canUndo(): boolean {\r\n        return this.undoHistory.size > 0;\r\n    }\r\n\r\n    canRedo(): boolean {\r\n        return this.redoHistory.size > 0;\r\n    }\r\n}\r\n","import { AnimationType } from \"../services/constants\";\r\nimport type { Color } from \"../services/constants\";\r\n\r\nexport default abstract class GridAnimationFrame {\r\n    row: number;\r\n    col: number;\r\n    animationType: AnimationType;\r\n    color: Color;\r\n\r\n    constructor(row: number, col: number, animationType: AnimationType, color: Color) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.animationType = animationType;\r\n        this.color = color;\r\n    }\r\n\r\n    isPlayerAnimation(): boolean {\r\n        return this.animationType === AnimationType.PLAYER;\r\n    }\r\n\r\n    isTileAnimation(): boolean {\r\n        return this.animationType === AnimationType.TILE;\r\n    }\r\n}\r\n","import GridAnimationFrame from \"./grid-animation-frame\";\r\nimport { AnimationType } from \"../services/constants\";\r\nimport type { Color } from \"../services/constants\";\r\n\r\nexport default class PlayerAnimationFrame extends GridAnimationFrame {\r\n    constructor(row: number, col: number, color: Color) {\r\n        super(row, col, AnimationType.PLAYER, color);\r\n    }\r\n}\r\n","import GridAnimationFrame from \"./grid-animation-frame\";\r\nimport { AnimationType } from \"../services/constants\";\r\nimport type { Color } from \"../services/constants\";\r\n\r\nexport default class TileAnimationFrame extends GridAnimationFrame {\r\n    constructor(row: number, col: number, color: Color) {\r\n        super(row, col, AnimationType.TILE, color);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Queue } from '@datastructures-js/queue';\r\nimport { cloneDeep } from \"lodash\";\r\nimport produce from \"immer\";\r\nimport GridComponent from \"../grid\";\r\nimport GameHUD from \"../game-hud\";\r\nimport GameComplete from \"../game-complete\";\r\nimport Solution from \"../solution\";\r\nimport GameAdjustMenu from \"../game-adjust-menu\";\r\nimport Settings from \"../settings\";\r\nimport Instructions from \"../instructions\";\r\nimport GameTutorial from \"../game-tutorial\";\r\nimport Player from \"../../classes/player\";\r\nimport Grid from \"../../classes/grid\";\r\nimport GameHistory from \"../../classes/game-history\";\r\nimport PlayerAnimationFrame from \"../../classes/player-animation-frame\";\r\nimport TileAnimationFrame from \"../../classes/tile-animation-frame\";\r\nimport { Color, Direction, TILES_SIZES, DEFAULT_TILE_SIZE } from \"../../services/constants\";\r\nimport { sleep } from \"../../services/util\";\r\nimport { TileSizeContext } from \"../../services/context\";\r\nimport \"./game.scss\";\r\n\r\nimport type GridAnimationFrame from \"../../classes/grid-animation-frame\";\r\nimport type { KeyboardEvent } from \"react\";\r\nimport type { GridCellConfig } from \"../../classes/grid\";\r\nimport type { PlayerMovement } from \"../../classes/player\";\r\nimport type { LevelInstruction } from \"../../services/levels\";\r\n\r\ninterface GameProps {\r\n    gridConfig: GridCellConfig[][],\r\n    playerRow: number,\r\n    playerCol: number,\r\n    levelNumber: number, // 1-indexed\r\n    levelName: string,\r\n    levelInstructions?: LevelInstruction[],\r\n    appHeight?: number,\r\n    completedBefore: boolean,\r\n    handleStarUpdate: (levelNumber: number, movesTaken: number) => number,\r\n    starsScoredOnLevel: (levelNum: number) => number,\r\n    starsToUnlockLevel: (levelNum: number) => number\r\n};\r\n\r\ninterface GameState {\r\n    grid: Grid,\r\n    playerRow: number,\r\n    playerCol: number,\r\n    playerColor: Color,\r\n    showSolution: boolean,\r\n    movesTaken: number,\r\n    gameStarted: boolean,\r\n    gameOver: boolean,\r\n    gameWon: boolean,\r\n    starsWon: number,\r\n    isPlayerMoving: boolean,\r\n    isMenuOpen: boolean,\r\n    areSettingsOpened: boolean,\r\n    areInstructionsOpened: boolean,\r\n    shouldCancelTilePress: boolean,\r\n    shouldResetLayout: boolean,\r\n    showTutorial: boolean,\r\n    tileSizeIndex: number,\r\n    gridWidth?: number,\r\n    gridHeight?: number\r\n};\r\n\r\nconst DEFAULT_TILE_SIZE_INDEX = 6;\r\n\r\nexport default class Game extends React.Component<GameProps, GameState> {\r\n    movementKeyFnMap: Record<string, Function>;\r\n    utilKeyFnMap: Record<string, Function>;\r\n    keyPressFlagMap: Record<string, boolean>;\r\n    gridAnimationQueue: Queue<GridAnimationFrame>;\r\n    gameContainerRef: React.RefObject<HTMLDivElement>;\r\n    gameHistory: GameHistory;\r\n\r\n    constructor(props: GameProps) {\r\n        super(props);\r\n        this.state = {\r\n            grid: new Grid(props.gridConfig),\r\n            playerRow: props.playerRow,\r\n            playerCol: props.playerCol,\r\n            playerColor: Color.DEFAULT,\r\n            showSolution: false,\r\n            movesTaken: 0,\r\n            gameStarted: false,\r\n            gameOver: false,\r\n            gameWon: false,\r\n            starsWon: 0,\r\n            isPlayerMoving: false,\r\n            isMenuOpen: false,\r\n            areSettingsOpened: false,\r\n            areInstructionsOpened: false,\r\n            shouldCancelTilePress: false,\r\n            shouldResetLayout: false,\r\n            showTutorial: !props.completedBefore && !!props.levelInstructions &&\r\n                props.levelInstructions.length > 0,\r\n            tileSizeIndex: DEFAULT_TILE_SIZE_INDEX\r\n        };\r\n\r\n        this.gridAnimationQueue = new Queue();\r\n        this.gameContainerRef = React.createRef();\r\n        this.gameHistory = new GameHistory(\r\n            this.state.grid,\r\n            this.state.playerRow,\r\n            this.state.playerCol,\r\n            this.state.playerColor\r\n        );\r\n\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n        this.onKeyUp = this.onKeyUp.bind(this);\r\n        this.resetFlags = this.resetFlags.bind(this);\r\n        this.onPlayerAnimationEnd = this.onPlayerAnimationEnd.bind(this);\r\n        this.restartGame = this.restartGame.bind(this);\r\n        this.inGameRestart = this.inGameRestart.bind(this);\r\n        this.setMenuOpen = this.setMenuOpen.bind(this);\r\n        this.undo = this.undo.bind(this);\r\n        this.redo = this.redo.bind(this);\r\n        this.zoomIn = this.zoomIn.bind(this);\r\n        this.zoomOut = this.zoomOut.bind(this);\r\n        this.showSettings = this.showSettings.bind(this);\r\n        this.showInstructions = this.showInstructions.bind(this);\r\n        this.hideOtherWindows = this.hideOtherWindows.bind(this);\r\n        this.onTilePress = this.onTilePress.bind(this);\r\n        this.setShouldCancelTilePress = this.setShouldCancelTilePress.bind(this);\r\n        this.onGridSizeChange = this.onGridSizeChange.bind(this);\r\n        this.resetLayout = this.resetLayout.bind(this);\r\n        this.onCompleteTutorial = this.onCompleteTutorial.bind(this);\r\n        this.startTutorial = this.startTutorial.bind(this);\r\n\r\n        this.movementKeyFnMap = {\r\n            ArrowUp: this.movePlayerByKeyDown.bind(this, Direction.UP),\r\n            ArrowDown: this.movePlayerByKeyDown.bind(this, Direction.DOWN),\r\n            ArrowLeft: this.movePlayerByKeyDown.bind(this, Direction.LEFT),\r\n            ArrowRight: this.movePlayerByKeyDown.bind(this, Direction.RIGHT)\r\n        };\r\n\r\n        this.utilKeyFnMap = {\r\n            r: this.inGameRestart,\r\n            y: this.redo,\r\n            z: this.undo\r\n        };\r\n\r\n        this.keyPressFlagMap = {\r\n            ArrowUp: false,\r\n            ArrowDown: false,\r\n            ArrowLeft: false,\r\n            ArrowRight: false\r\n        };\r\n    }\r\n\r\n    onKeyDown(event: KeyboardEvent): void {\r\n\r\n        // Toggle menu\r\n        if (event.key === \"Escape\" || event.key === \"Esc\") {\r\n            event.preventDefault();\r\n            this.setMenuOpen(!this.state.isMenuOpen);\r\n        }\r\n\r\n        // Button press while menu is opened\r\n        else if (this.state.isMenuOpen) {\r\n            this.handleMenuKeyDown(event);\r\n        }\r\n\r\n        // Player movement\r\n        else if (this.movementKeyFnMap[event.key]) {\r\n            event.preventDefault();\r\n\r\n            if (!this.keyPressFlagMap[event.key]) {\r\n                this.keyPressFlagMap[event.key] = true;\r\n                this.movementKeyFnMap[event.key](event);\r\n            }\r\n        }\r\n\r\n        // Utility function\r\n        else if (this.utilKeyFnMap[event.key]) {\r\n            event.preventDefault();\r\n            this.utilKeyFnMap[event.key]();\r\n        }\r\n\r\n        // Toggle solution\r\n        else if (event.key.toLowerCase() === \"q\") {\r\n            event.preventDefault();\r\n            this.setState({ showSolution: true });\r\n        }\r\n    }\r\n\r\n    // Handles key presses while the game menu is opened\r\n    handleMenuKeyDown(event: KeyboardEvent): void {\r\n        const activeEle = document.activeElement;\r\n        const isActiveOnHam = !!activeEle && activeEle.classList.contains(\"hamburger-react\");\r\n        const isActiveOnLink = !!activeEle && activeEle.classList.contains(\"game-menu-btn\");\r\n        const isActiveOnFirst = !!activeEle && activeEle.classList.contains(\"game-menu-first\");\r\n        const isActiveOnLast = !!activeEle && activeEle.classList.contains(\"game-menu-last\");\r\n\r\n        // Go to next menu item\r\n        if (event.key === \"ArrowDown\") {\r\n            event.preventDefault();\r\n\r\n            if (!activeEle || isActiveOnLast || (!isActiveOnHam && !isActiveOnLink)) {\r\n                const hamBtn = document.querySelector<HTMLElement>(\".hamburger-react\");\r\n                hamBtn && hamBtn.focus();\r\n            } else if (isActiveOnHam) {\r\n                const firstBtn = document.querySelector<HTMLElement>(\".game-menu-btn\");\r\n                firstBtn && firstBtn.focus();\r\n            } else {\r\n                const sibling = activeEle.nextSibling as HTMLElement;\r\n                sibling && sibling.focus();\r\n            }\r\n\r\n        }\r\n\r\n        // Go to previous menu item\r\n        else if (event.key === \"ArrowUp\") {\r\n            event.preventDefault();\r\n\r\n            if (!activeEle || isActiveOnHam || !isActiveOnLink) {\r\n                const lastBtn = document.querySelector<HTMLElement>(\".game-menu-last\");\r\n                lastBtn && lastBtn.focus();\r\n            } else if (isActiveOnFirst) {\r\n                const hamBtn = document.querySelector<HTMLElement>(\".hamburger-react\");\r\n                hamBtn && hamBtn.focus();\r\n            } else {\r\n                const sibling = activeEle.previousSibling as HTMLElement;\r\n                sibling && sibling.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    onKeyUp(event: KeyboardEvent): void {\r\n        if (this.keyPressFlagMap[event.key]) {\r\n            event.preventDefault();\r\n            this.keyPressFlagMap[event.key] = false;\r\n        } else if (event.key.toLowerCase() === \"q\") {\r\n            event.preventDefault();\r\n            this.setState({ showSolution: false });\r\n        }\r\n    }\r\n\r\n    resetFlags(): void {\r\n        for (const key in this.keyPressFlagMap) {\r\n            this.keyPressFlagMap[key] = false;\r\n        }\r\n\r\n        this.setState({ showSolution: false });\r\n    }\r\n\r\n    // Processes a move and returns the number of tiles moved\r\n    makeMove(grid: Grid, player: Player, playerMovement: PlayerMovement): number {\r\n        let moveResult = player.move(playerMovement);\r\n        let moveCount = 0;\r\n\r\n        // If move is invalid, return\r\n        if (!moveResult.moved) {\r\n            return moveCount;\r\n        }\r\n\r\n        // Otherwise, add animation frames until the player stops moving\r\n        while (moveResult.moved) {\r\n\r\n            moveCount += 1;\r\n            const { newRow, newCol, newColor, gridCellMovedTo } = moveResult;\r\n\r\n            // Check if the grid tile needs to be updated\r\n            let updatedTileColor = gridCellMovedTo && gridCellMovedTo.updateColor(newColor);\r\n            if (updatedTileColor) {\r\n                this.gridAnimationQueue.enqueue(\r\n                    new TileAnimationFrame(newRow, newCol, updatedTileColor)\r\n                );\r\n            }\r\n\r\n            // Add player animation frame\r\n            this.gridAnimationQueue.enqueue(\r\n                new PlayerAnimationFrame(newRow, newCol, newColor)\r\n            );\r\n\r\n            // Try to move again\r\n            playerMovement = {\r\n                currentDirection: null,\r\n                prevDirection: playerMovement.currentDirection\r\n            };\r\n\r\n            moveResult = player.move(playerMovement);\r\n        }\r\n\r\n        // Record final state in game history\r\n        this.gameHistory.push(grid, player.row, player.col, player.color);\r\n\r\n        return moveCount;\r\n    }\r\n\r\n    isAnimationInProgress(): boolean {\r\n        return (this.gridAnimationQueue.size() > 0 || this.state.isPlayerMoving);\r\n    }\r\n\r\n    isGameActive(): boolean {\r\n        return !this.state.gameOver && !this.state.isMenuOpen;\r\n    }\r\n\r\n    async movePlayerByKeyDown(dir: Direction, event: KeyboardEvent): Promise<void> {\r\n\r\n        let movedPrevLoop = false; // Flag to prevent infinite loop\r\n\r\n        // Continuously move the player while key is pressed down, game is not over,\r\n        // and menu is closed\r\n        while (this.keyPressFlagMap[event.key] && this.isGameActive()) {\r\n\r\n            // Do not move the player if already in motion; wait until next cycle and check again\r\n            if (this.isAnimationInProgress() || movedPrevLoop) {\r\n                movedPrevLoop = false;\r\n                await sleep(0);\r\n                continue;\r\n            }\r\n\r\n            const { grid, playerRow, playerCol, playerColor } = this.state;\r\n            const gridClone = cloneDeep(grid);\r\n            const player = new Player(playerRow, playerCol, gridClone, playerColor);\r\n\r\n            let playerMovement: PlayerMovement = { currentDirection: dir, prevDirection: null };\r\n            let moveCount = this.makeMove(gridClone, player, playerMovement);\r\n\r\n            // If move is invalid, wait until next cycle\r\n            if (moveCount === 0) {\r\n                await sleep(0);\r\n                continue;\r\n            }\r\n\r\n            // Otherwise, the move was valid; process next animation\r\n            this.startNextAnimation();\r\n\r\n            // Set flag\r\n            movedPrevLoop = true;\r\n        }\r\n    }\r\n\r\n    onTilePress(row: number, col: number): void {\r\n        const { grid, playerRow, playerCol, playerColor, shouldCancelTilePress } = this.state;\r\n\r\n        // Do not move if the tile pressed is not on the same row or column; or if it is the same\r\n        // tile that the player is on already; or if there is animation in progress; or if the\r\n        // press should be cancelled (e.g. because the user was dragging to the grid)\r\n        if ((row === playerRow && col === playerCol) || (row !== playerRow && col !== playerCol) ||\r\n            this.isAnimationInProgress() || shouldCancelTilePress) {\r\n            return;\r\n        }\r\n\r\n        // Determine the movement direction\r\n        let dir = null;\r\n        if (row < playerRow) { dir = Direction.UP; }\r\n        else if (row > playerRow) { dir = Direction.DOWN; }\r\n        else if (col < playerCol) { dir = Direction.LEFT; }\r\n        else if (col > playerCol) { dir = Direction.RIGHT; }\r\n\r\n        // Determine maximum number of times to move in that direction\r\n        const numTimesToMove = Math.max(Math.abs(playerRow - row), Math.abs(playerCol - col));\r\n\r\n        let gridClone = cloneDeep(grid);\r\n        const player = new Player(playerRow, playerCol, gridClone, playerColor);\r\n\r\n        // Start moving in that direction\r\n        for (let i = 0; i < numTimesToMove; i += 1) {\r\n            let playerMovement: PlayerMovement = { currentDirection: dir, prevDirection: null };\r\n            let moveCount = this.makeMove(gridClone, player, playerMovement);\r\n\r\n            // Do not continue unless the player moved exactly one tile\r\n            if (moveCount !== 1) {\r\n                break;\r\n            }\r\n\r\n            // Re-clone the grid for each move\r\n            gridClone = cloneDeep(gridClone);\r\n            player.grid = gridClone;\r\n        }\r\n\r\n        // Process next animation\r\n        this.startNextAnimation();\r\n    }\r\n\r\n    onGridSizeChange(width?: number, height?: number): void {\r\n        this.setState({\r\n            gridWidth: width,\r\n            gridHeight: height\r\n        });\r\n    }\r\n\r\n    startNextAnimation(): void {\r\n\r\n        // Process animations until we process a player animation\r\n        while (this.gridAnimationQueue.size() > 0) {\r\n            const animationFrame = this.gridAnimationQueue.dequeue();\r\n\r\n            // Process player animation\r\n            if (animationFrame.isPlayerAnimation()) {\r\n                // Move the player\r\n                this.setState({\r\n                    playerRow: animationFrame.row,\r\n                    playerCol: animationFrame.col,\r\n                    playerColor: animationFrame.color,\r\n                    isPlayerMoving: true,\r\n                    gameStarted: true,\r\n                    movesTaken: this.state.movesTaken + 1\r\n                });\r\n\r\n                break;\r\n            }\r\n\r\n            // Process tile animation\r\n            else {\r\n                this.setState({\r\n                    grid: produce(this.state.grid, draft => {\r\n                        const gridCell = draft.getCellAt(animationFrame.row, animationFrame.col);\r\n                        gridCell && (gridCell.color = animationFrame.color);\r\n                    })\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    // This method is called after player animation is completed\r\n    onPlayerAnimationEnd(): void {\r\n        this.setState({ isPlayerMoving: false });\r\n\r\n        if (this.gridAnimationQueue.size() > 0) {\r\n            this.startNextAnimation();\r\n        } else if (this.state.grid.isGridSolved()) {\r\n            this.setState({\r\n                gameOver: true,\r\n                gameWon: true,\r\n                showTutorial: false,\r\n                starsWon: this.props.handleStarUpdate(this.props.levelNumber, this.state.movesTaken)\r\n            });\r\n        }\r\n    }\r\n\r\n    restartGame(): void {\r\n        const newGrid = new Grid(this.props.gridConfig);\r\n\r\n        this.setState({\r\n            grid: newGrid,\r\n            playerRow: this.props.playerRow,\r\n            playerCol: this.props.playerCol,\r\n            playerColor: Color.DEFAULT,\r\n            movesTaken: 0,\r\n            gameStarted: false,\r\n            gameOver: false,\r\n            gameWon: false,\r\n            starsWon: 0,\r\n            isPlayerMoving: false,\r\n            showSolution: false,\r\n            isMenuOpen: false,\r\n            shouldCancelTilePress: false,\r\n            shouldResetLayout: false\r\n        });\r\n\r\n        this.gameHistory = new GameHistory(\r\n            newGrid,\r\n            this.props.playerRow,\r\n            this.props.playerCol,\r\n            Color.DEFAULT\r\n        );\r\n\r\n        this.gridAnimationQueue.clear();\r\n\r\n        // Re-focus on the game container\r\n        this.gameContainerRef.current && this.gameContainerRef.current.focus();\r\n    }\r\n\r\n    // Only restart in the middle of a game if certain conditions are met\r\n    inGameRestart(): void {\r\n        if (!this.canAlterGameState()) {\r\n            return;\r\n        }\r\n\r\n        this.restartGame();\r\n    }\r\n\r\n    canAlterGameState() {\r\n        return (!this.state.isPlayerMoving && this.gridAnimationQueue.size() <= 0 &&\r\n            this.isGameActive());\r\n    }\r\n\r\n    undo(): void {\r\n        if (!this.canAlterGameState()) {\r\n            return;\r\n        }\r\n\r\n        const gameHistoryState = this.gameHistory.undo();\r\n\r\n        if (gameHistoryState) {\r\n            this.setState({\r\n                grid: gameHistoryState.grid,\r\n                playerRow: gameHistoryState.playerRow,\r\n                playerCol: gameHistoryState.playerCol,\r\n                playerColor: gameHistoryState.playerColor,\r\n                movesTaken: this.state.movesTaken - 1\r\n            });\r\n        }\r\n    }\r\n\r\n    redo(): void {\r\n        if (!this.canAlterGameState()) {\r\n            return;\r\n        }\r\n\r\n        const gameHistoryState = this.gameHistory.redo();\r\n\r\n        if (gameHistoryState) {\r\n            this.setState({\r\n                grid: gameHistoryState.grid,\r\n                playerRow: gameHistoryState.playerRow,\r\n                playerCol: gameHistoryState.playerCol,\r\n                playerColor: gameHistoryState.playerColor,\r\n                movesTaken: this.state.movesTaken + 1\r\n            });\r\n        }\r\n    }\r\n\r\n    canZoomIn(): boolean {\r\n        return this.state.tileSizeIndex < TILES_SIZES.length - 1;\r\n    }\r\n\r\n    canZoomOut(): boolean {\r\n        return this.state.tileSizeIndex > 0;\r\n    }\r\n\r\n    zoomIn(): void {\r\n        if (this.canZoomIn() && this.isGameActive()) {\r\n            this.setState({\r\n                tileSizeIndex: this.state.tileSizeIndex + 1\r\n            });\r\n        }\r\n    }\r\n\r\n    zoomOut(): void {\r\n        if (this.canZoomOut() && this.isGameActive()) {\r\n            this.setState({\r\n                tileSizeIndex: this.state.tileSizeIndex - 1\r\n            });\r\n        }\r\n    }\r\n\r\n    setMenuOpen(isOpen: boolean): void {\r\n        this.setState({\r\n            isMenuOpen: isOpen\r\n        });\r\n\r\n        this.resetFlags();\r\n\r\n        // If closing the menu, refocus on the game container\r\n        if (!isOpen) {\r\n            this.gameContainerRef.current && this.gameContainerRef.current.focus();\r\n        }\r\n    }\r\n\r\n    showSettings(): void {\r\n        this.setState({\r\n            areSettingsOpened: true,\r\n            areInstructionsOpened: false\r\n        });\r\n    }\r\n\r\n    showInstructions(): void {\r\n        this.setState({\r\n            areSettingsOpened: false,\r\n            areInstructionsOpened: true\r\n        });\r\n    }\r\n\r\n    resetLayout(): void {\r\n        // Set the flag\r\n        this.setState({\r\n            shouldResetLayout: true,\r\n            tileSizeIndex: DEFAULT_TILE_SIZE_INDEX\r\n        }, async () => {\r\n            // Wait one cycle\r\n            await sleep(0);\r\n\r\n            // Unset the flag\r\n            this.setState({ shouldResetLayout: false });\r\n        });\r\n    }\r\n\r\n    hideOtherWindows(): void {\r\n        this.setState({\r\n            areSettingsOpened: false,\r\n            areInstructionsOpened: false,\r\n            isMenuOpen: false\r\n        });\r\n    }\r\n\r\n    onCompleteTutorial(): void {\r\n        this.setState({\r\n            showTutorial: false\r\n        });\r\n    }\r\n\r\n    startTutorial(): void {\r\n        this.setState({\r\n            showTutorial: true\r\n        });\r\n    }\r\n\r\n    // Focus on the game container after mounting\r\n    componentDidMount(): void {\r\n        this.gameContainerRef.current && this.gameContainerRef.current.focus();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: GameProps): void {\r\n        if (this.props.levelNumber !== prevProps.levelNumber) {\r\n            this.restartGame();\r\n            this.setState({\r\n                tileSizeIndex: DEFAULT_TILE_SIZE_INDEX,\r\n                showTutorial: !this.props.completedBefore && !!this.props.levelInstructions &&\r\n                    this.props.levelInstructions.length > 0,\r\n            });\r\n        }\r\n    }\r\n\r\n    setShouldCancelTilePress(bool: boolean): void {\r\n        this.setState({\r\n            shouldCancelTilePress: bool\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            grid,\r\n            playerRow,\r\n            playerCol,\r\n            playerColor,\r\n            showSolution,\r\n            isPlayerMoving,\r\n            movesTaken,\r\n            gameStarted,\r\n            gameWon,\r\n            gameOver,\r\n            isMenuOpen,\r\n            areSettingsOpened,\r\n            areInstructionsOpened,\r\n            gridWidth,\r\n            gridHeight,\r\n            shouldResetLayout\r\n        } = this.state;\r\n\r\n        let gameClass = \"game\";\r\n        gameClass += gameWon ? \" game-won\" : \"\";\r\n        gameClass += !gameStarted ? \" game-pending\" : \"\";\r\n\r\n        const gameStyle = (areSettingsOpened || areInstructionsOpened) ? { display: \"none\" } : {};\r\n\r\n        // Only show the completion component when the user beats the puzzle\r\n        const gameCompleteEle = gameWon ? (\r\n            <GameComplete levelNumber={this.props.levelNumber}\r\n                stars={this.state.starsWon}\r\n                restartHandler={this.restartGame}\r\n                starsScoredOnLevel={this.props.starsScoredOnLevel}\r\n                starsToUnlockLevel={this.props.starsToUnlockLevel} />\r\n        ) : null;\r\n\r\n        const tileSize = TILES_SIZES[this.state.tileSizeIndex] ?? DEFAULT_TILE_SIZE\r\n        const canStartTutorial = !!this.props.levelInstructions &&\r\n            this.props.levelInstructions.length > 0 &&\r\n            !this.state.showTutorial;\r\n        const startTutorial = canStartTutorial ? this.startTutorial : undefined;\r\n\r\n        // Game tutorial\r\n        const tutorial = (this.props.levelInstructions && this.state.showTutorial) ? (\r\n            <GameTutorial levelInstructions={this.props.levelInstructions}\r\n                onComplete={this.onCompleteTutorial} isMenuOpen={isMenuOpen} />\r\n        ) : null;\r\n\r\n        return (\r\n            <div>\r\n                <TileSizeContext.Provider value={tileSize}>\r\n                    <div className={gameClass}\r\n                        ref={this.gameContainerRef}\r\n                        tabIndex={1}\r\n                        onKeyDown={this.onKeyDown}\r\n                        onKeyUp={this.onKeyUp}\r\n                        onFocus={this.resetFlags}\r\n                        onBlur={this.resetFlags}\r\n                        style={gameStyle}>\r\n\r\n                        <GameHUD\r\n                            movesTaken={movesTaken}\r\n                            levelNumber={this.props.levelNumber}\r\n                            levelName={this.props.levelName}\r\n                            isMenuOpen={isMenuOpen}\r\n                            setMenuOpen={this.setMenuOpen}\r\n                            showSettings={this.showSettings}\r\n                            showInstructions={this.showInstructions}\r\n                            resetLayout={this.resetLayout}\r\n                            startTutorial={startTutorial} />\r\n                        <Solution\r\n                            grid={grid}\r\n                            playerRow={playerRow}\r\n                            playerCol={playerCol}\r\n                            levelNumber={this.props.levelNumber}\r\n                            gridWidth={gridWidth}\r\n                            gridHeight={gridHeight}\r\n                            appHeight={this.props.appHeight}\r\n                            shouldResetLayout={shouldResetLayout}\r\n                            gameOver={gameOver}\r\n                            isMenuOpen={isMenuOpen} />\r\n                        <GameAdjustMenu\r\n                            canUndo={this.gameHistory.canUndo()}\r\n                            canRedo={this.gameHistory.canRedo()}\r\n                            canZoomIn={this.canZoomIn()}\r\n                            canZoomOut={this.canZoomOut()}\r\n                            restartHandler={this.inGameRestart}\r\n                            undoHandler={this.undo}\r\n                            redoHandler={this.redo}\r\n                            zoomInHandler={this.zoomIn}\r\n                            zoomOutHandler={this.zoomOut} />\r\n                        <GridComponent\r\n                            grid={grid}\r\n                            playerRow={playerRow}\r\n                            playerCol={playerCol}\r\n                            playerColor={playerColor}\r\n                            levelNumber={this.props.levelNumber}\r\n                            showSolution={showSolution}\r\n                            isPlayerMoving={isPlayerMoving}\r\n                            onPlayerAnimationEnd={this.onPlayerAnimationEnd}\r\n                            onTilePress={this.onTilePress}\r\n                            dragHandler={this.setShouldCancelTilePress}\r\n                            onGridSizeChange={this.onGridSizeChange}\r\n                            shouldResetLayout={shouldResetLayout} />\r\n\r\n                        {gameCompleteEle}\r\n                        {tutorial}\r\n                    </div>\r\n                </TileSizeContext.Provider>\r\n\r\n                <Settings\r\n                    visible={areSettingsOpened}\r\n                    onGoBack={this.hideOtherWindows} />\r\n\r\n                <Instructions\r\n                    visible={areInstructionsOpened}\r\n                    onGoBack={this.hideOtherWindows} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { Redirect, useParams } from \"react-router\";\r\nimport Game from \"../game\";\r\nimport LEVELS from \"../../services/levels\";\r\n\r\nimport type { LevelScore } from \"../../services/definitions\";\r\n\r\ninterface GameParams {\r\n    levelNumber: string\r\n};\r\n\r\ninterface GameRedirectProps {\r\n    starCount: number,\r\n    levelScoreMap: Record<string, LevelScore>,\r\n    handleStarUpdate: (levelNumber: number, movesTaken: number) => number,\r\n    starsScoredOnLevel: (levelNum: number) => number,\r\n    starsToUnlockLevel: (levelNum: number) => number,\r\n    appHeight?: number\r\n};\r\n\r\nexport default function GameRedirect(props: GameRedirectProps) {\r\n    const { levelNumber } = useParams<GameParams>();\r\n    const levelInt = parseInt(levelNumber);\r\n\r\n    if (isNaN(levelInt) || !LEVELS[levelInt - 1] ||\r\n        props.starCount < LEVELS[levelInt - 1].requiredToUnlock) {\r\n        return <Redirect to=\"/level-select\" />\r\n    }\r\n\r\n    const {\r\n        id,\r\n        gridConfig,\r\n        playerRow,\r\n        playerCol,\r\n        levelName,\r\n        levelInstructions\r\n    } = LEVELS[levelInt - 1];\r\n\r\n    return (\r\n        <Game gridConfig={gridConfig} playerRow={playerRow} playerCol={playerCol}\r\n            levelName={levelName} levelNumber={levelInt}\r\n            handleStarUpdate={props.handleStarUpdate}\r\n            starsScoredOnLevel={props.starsScoredOnLevel}\r\n            starsToUnlockLevel={props.starsToUnlockLevel}\r\n            appHeight={props.appHeight}\r\n            levelInstructions={levelInstructions}\r\n            completedBefore={!!props.levelScoreMap[id] && props.levelScoreMap[id].solved} />\r\n    );\r\n}\r\n","import { useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport Settings from \"../settings\";\r\nimport Instructions from \"../instructions\";\r\nimport LEVELS from \"../../services/levels\";\r\nimport \"./home.scss\";\r\n\r\ninterface HomeProps {\r\n    playAnimation: boolean,\r\n    starsScoredOnLevel: (levelNum: number) => number\r\n    onEraseData: () => void\r\n};\r\n\r\nconst TITLE = (\r\n    <>\r\n        <span className=\"first-letter\">C</span>OLOR&nbsp;\r\n        <span className=\"first-letter\">C</span>OORDS\r\n    </>\r\n);\r\n\r\nconst TITLE_COL_NUM = 6;\r\nconst BG_LAYER_NUM = 48;\r\nconst GRADIENT_ANIM_TIME = 300;\r\n\r\nexport default function Home(props: HomeProps) {\r\n    const [ gradientDelay ] = useState(Math.random() * GRADIENT_ANIM_TIME);\r\n    const [ playAnimation, setPlayAnimation ] = useState(props.playAnimation);\r\n    const [ showSettings, setShowSettings ] = useState(false);\r\n    const [ showInstructions, setShowInstructions ] = useState(false);\r\n    const [ playLevelNumber, setPlayLevelNumber ] = useState<number | null>(null);\r\n\r\n    const onPlay = () => {\r\n        let lastUnlockedLevel = 1;\r\n        let firstUnsolvedLevel: (number | null) = null;\r\n        let firstIncompleteLevel: (number | null) = null;\r\n\r\n        for (let i = 0; i < LEVELS.length; i += 1) {\r\n            const levelNum = i + 1;\r\n            const starsScored = props.starsScoredOnLevel(levelNum);\r\n\r\n            if (starsScored === 0) {\r\n                firstUnsolvedLevel = i + 1;\r\n                break;\r\n            }\r\n\r\n            if (starsScored > 0) {\r\n                lastUnlockedLevel = i + 1;\r\n\r\n                if (firstIncompleteLevel === null && starsScored < 3) {\r\n                    firstIncompleteLevel = i + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (firstUnsolvedLevel !== null) {\r\n            setPlayLevelNumber(firstUnsolvedLevel);\r\n        } else if (firstIncompleteLevel !== null) {\r\n            setPlayLevelNumber(firstIncompleteLevel);\r\n        } else {\r\n            setPlayLevelNumber(lastUnlockedLevel);\r\n        }\r\n    };\r\n\r\n    const onReturn = () => {\r\n        setShowSettings(false);\r\n        setShowInstructions(false);\r\n        setPlayAnimation(false);\r\n    };\r\n\r\n    const onSettingsClick = () => {\r\n        setShowSettings(true);\r\n        setShowInstructions(false);\r\n    };\r\n\r\n    const onInstructionsClick = () => {\r\n        setShowSettings(false);\r\n        setShowInstructions(true);\r\n    };\r\n\r\n    const homeClass = `home-container ${!playAnimation ? \" home-anim-off\" : \"\"}`;\r\n    const coloredTitles = [];\r\n    const bgLayers = [];\r\n\r\n    for (let i = 0; i < TITLE_COL_NUM; i += 1) {\r\n        const key = `title-colored-${i + 1}`;\r\n        const titleClass = `title-box title-colored ${key}`;\r\n        coloredTitles.push(\r\n            <div className={titleClass} key={key}>\r\n                <span className=\"title-text\" aria-hidden>{TITLE}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    for (let i = 0; i < 4; i += 1) {\r\n        for (let j = 0; j < BG_LAYER_NUM; j += 1) {\r\n            const key = `bg-layer-${i + 1}-${j + 1}`;\r\n            const layerClass = `bg-layer bg-layer-${j + 1}`\r\n            bgLayers.push(\r\n                <div className={layerClass} key={key}></div>\r\n            );\r\n        }\r\n    }\r\n\r\n    const gradientStyle = {\r\n        animationDelay: `-${gradientDelay}s`\r\n    };\r\n\r\n    const homeStyle = {\r\n        display: (showSettings || showInstructions) ? \"none\" : \"block\"\r\n    };\r\n\r\n    if (playLevelNumber !== null) {\r\n        return <Redirect to={`/game/${playLevelNumber}`} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={homeClass} style={homeStyle}>\r\n                <div className=\"home-bg\">\r\n                    <div className=\"home-bg-gradient\" style={gradientStyle}>{bgLayers}</div>\r\n                </div>\r\n                <div className=\"title-container\">\r\n                    <div className=\"title-box title-main\">\r\n                        <h1 className=\"title-text\" aria-label=\"Color Coords\">{TITLE}</h1>\r\n                    </div>\r\n                    {coloredTitles}\r\n                </div>\r\n\r\n                <nav className=\"home-nav\">\r\n                    <button className=\"home-nav-btn-1\" onClick={onPlay}>Play</button><br />\r\n\r\n                    <Link to=\"/level-select\" className=\"home-nav-btn-2\">Level Select</Link><br />\r\n\r\n                    <button className=\"home-nav-btn-3\" onClick={onInstructionsClick}>\r\n                        How to Play\r\n                    </button><br />\r\n\r\n                    <button className=\"home-nav-btn-4\" onClick={onSettingsClick}>Settings</button>\r\n                </nav>\r\n            </div>\r\n\r\n            <Settings\r\n                visible={showSettings}\r\n                onGoBack={onReturn}\r\n                onEraseData={props.onEraseData} />\r\n\r\n            <Instructions\r\n                visible={showInstructions}\r\n                onGoBack={onReturn} />\r\n        </div>\r\n    );\r\n}\r\n","import LEVELS from \"./levels\";\r\nimport type { LevelScore } from \"./definitions\";\r\n\r\n// Creates a simple mapping between level ID and level score\r\n// Assumes player has not completed any level\r\nexport function getDefaultLevelScoreMap() {\r\n    // Create mapping\r\n    const levelScoreMap: Record<string, LevelScore> = {};\r\n\r\n    // Default mapping - no saved scores\r\n    for (const levelConfig of LEVELS) {\r\n        levelScoreMap[levelConfig.id] = {\r\n            solved: false,\r\n            moves: 0,\r\n            stars: 0\r\n        };\r\n    }\r\n\r\n    return levelScoreMap;\r\n}\r\n\r\n/**\r\n * Calculates the number of stars, given the number of moves taken and the star requirements\r\n * @param moves\r\n * @param starReq3\r\n * @param starReq2\r\n * @returns\r\n */\r\nexport function getStarsScoredByMoves(moves: number, starReq3: number, starReq2: number): number {\r\n    let starsScored = 1;\r\n    if (moves <= starReq3) {\r\n        starsScored = 3;\r\n    } else if (moves <= starReq2) {\r\n        starsScored = 2;\r\n    }\r\n\r\n    return starsScored;\r\n}\r\n","import { openDB } from \"idb\";\r\nimport { getStarsScoredByMoves, getDefaultLevelScoreMap } from \"./cc-util\";\r\nimport LEVELS from \"./levels\";\r\n\r\nimport type { IDBPDatabase } from \"idb\";\r\nimport type { LevelScore } from \"./definitions\";\r\nimport type { GameConfig } from \"./levels\";\r\n\r\nconst DB_NAME = \"cc\";\r\nconst SCORES_STORE_NAME = \"scores\";\r\n\r\nfunction upgrade(db: IDBPDatabase) {\r\n    db.createObjectStore(SCORES_STORE_NAME, { keyPath: \"id\" });\r\n}\r\n\r\nexport async function loadLevelScores(): Promise<Record<string, LevelScore>> {\r\n    const db = await openDB(DB_NAME, 1, { upgrade });\r\n    const transaction = db.transaction(SCORES_STORE_NAME, \"readonly\");\r\n    const scoresStore = transaction.objectStore(SCORES_STORE_NAME);\r\n\r\n    const scores = await scoresStore.getAll();\r\n    await transaction.done;\r\n\r\n    db.close();\r\n\r\n    // Create mapping\r\n    const levelScoreMap: Record<string, LevelScore> = getDefaultLevelScoreMap();\r\n    const levelById: Record<string, GameConfig> = {};\r\n\r\n    for (const levelConfig of LEVELS) {\r\n        levelById[levelConfig.id] = levelConfig;\r\n    }\r\n\r\n    // Update mapping with scores saved in DB\r\n    for (const score of scores) {\r\n        if (!isNaN(score?.moves) && levelScoreMap[score?.id]) {\r\n            levelScoreMap[score.id].solved = true;\r\n            levelScoreMap[score.id].moves = parseInt(score.moves, 10);\r\n            levelScoreMap[score.id].stars = getStarsScoredByMoves(levelScoreMap[score.id].moves,\r\n                levelById[score.id].starRequirement3, levelById[score.id].starRequirement2);\r\n        }\r\n    }\r\n\r\n    return levelScoreMap;\r\n}\r\n\r\nexport async function saveScore(levelId: string, moves: number): Promise<void> {\r\n    const db = await openDB(DB_NAME, 1, { upgrade });\r\n    const transaction = db.transaction(SCORES_STORE_NAME, \"readwrite\");\r\n    const scoresStore = transaction.objectStore(SCORES_STORE_NAME);\r\n\r\n    // Update score if fewer moves were used\r\n    const prevScore = await scoresStore.get(levelId);\r\n    if (!prevScore || isNaN(prevScore?.moves) || moves < prevScore.moves) {\r\n        await scoresStore.put({ id: levelId, moves });\r\n    }\r\n\r\n    await transaction.done;\r\n\r\n    db.close();\r\n}\r\n\r\nexport async function clearScores(): Promise<void> {\r\n    const db = await openDB(DB_NAME, 1, { upgrade });\r\n    const transaction = db.transaction(SCORES_STORE_NAME, \"readwrite\");\r\n    const scoresStore = transaction.objectStore(SCORES_STORE_NAME);\r\n\r\n    await scoresStore.clear();\r\n    await transaction.done;\r\n\r\n    db.close();\r\n}\r\n","import { useState, useEffect } from \"react\";\nimport { useResizeDetector } from 'react-resize-detector/build/withPolyfill';\nimport produce from \"immer\";\nimport WebFont from \"webfontloader\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport LevelSelect from \"../level-select\";\nimport GameRedirect from \"../game-redirect\";\nimport Home from \"../home\";\nimport { sleep } from \"../../services/util\";\nimport LEVELS from \"../../services/levels\";\nimport { loadLevelScores, saveScore, clearScores } from \"../../services/idb\";\nimport { getStarsScoredByMoves, getDefaultLevelScoreMap } from \"../../services/cc-util\";\n\nimport \"./app.scss\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport type { LevelScore } from \"../../services/definitions\";\n\nexport default function App() {\n    const [ starCount, setStarCount ] = useState(0);\n    const [ playHomeAnimation, setPlayHomeAnimation ] = useState(true);\n    const [ isReady, setIsReady ] = useState(false);\n    const [ areFontsLoaded, setAreFontsLoaded ] = useState(false);\n    const [ isSavedDataLoaded, setIsSavedDataLoaded ] = useState(false);\n    const [ levelScoreMap, setLevelScoreMap ] = useState<Record<string, LevelScore>>({});\n\n    const { height, ref } = useResizeDetector({\n        refreshMode: \"throttle\",\n        refreshRate: 1\n    });\n\n    /**\n     * Handler to update star counts after a level is completed\n     * @param levelNumber - Level identifier (1-indexed)\n     * @param movesTaken - Moves taken to complete the level\n     * @returns Number of stars awarded for the given level attempt\n     */\n    const handleStarUpdate = (levelNumber: number, movesTaken: number) => {\n        const levelConfig = LEVELS[levelNumber - 1];\n        if (!levelConfig) { return 0; }\n\n        // Get the star score for the current level attempt\n        let starsScored = getStarsScoredByMoves(movesTaken, levelConfig.starRequirement3,\n            levelConfig.starRequirement2);\n\n        if (movesTaken < levelScoreMap[levelConfig.id]?.moves ||\n            levelScoreMap[levelConfig.id]?.solved === false) {\n\n            const prevStars = levelScoreMap[levelConfig.id]?.stars ?? 0;\n            const nextLevelScoreMap = produce(levelScoreMap, draft => {\n                draft[levelConfig.id].solved = true;\n                draft[levelConfig.id].moves = movesTaken;\n                draft[levelConfig.id].stars = starsScored;\n            });\n\n            setLevelScoreMap(nextLevelScoreMap);\n            setStarCount(starCount + (starsScored - prevStars));\n        }\n\n        // Update DB\n        saveScore(levelConfig.id, movesTaken)\n            .catch(() => {\n                toast.error(\"Unable to save data.\");\n            });\n\n        return starsScored;\n    };\n\n    /**\n     * Returns the number stars the player has collected from the given level\n     * @param levelNum 1-indexed\n     * @returns If the level is unlocked, return the number of stars scored on the level; returns\n     *          -1 if the level is locked\n     */\n    const starsScoredOnLevel = (levelNum: number) => {\n        const level = LEVELS[levelNum - 1];\n        if (!level) { return -1; }\n\n        if (levelScoreMap[level.id]?.stars > 0 || starCount >= level.requiredToUnlock) {\n            return (levelScoreMap[level.id]?.stars ?? 0);\n        }\n\n        return -1;\n    };\n\n    /**\n     * Returns the number of additional stars the player must collect in order to unlock the given\n     * level\n     * @param levelNum 1-indexed\n     * @returns If the level is unlocked, returns 0; if given level is invalid, returns -1;\n     *          otherwise returns the difference between the stars required and the current\n     *          number of collected stars\n     */\n    const starsToUnlockLevel = (levelNum: number) => {\n        if (starsScoredOnLevel(levelNum) >= 0) {\n            return 0;\n        }\n\n        const level = LEVELS[levelNum - 1];\n        if (!level) { return -1; }\n\n        return level.requiredToUnlock - starCount;\n    };\n\n    const eraseData = () => {\n        const nextLevelScoreMap = produce(levelScoreMap, draft => {\n            for (const levelId in draft) {\n                draft[levelId].solved = false;\n                draft[levelId].moves = 0;\n                draft[levelId].stars = 0;\n            }\n        });\n\n        setLevelScoreMap(nextLevelScoreMap);\n        setStarCount(0);\n\n        // Update DB\n        clearScores()\n            .then(() => {\n                toast.success(\"Save data has been erased.\");\n            })\n            .catch(() => {\n                toast.error(\"Unable to erase data.\");\n            });\n    };\n\n    // On mount\n    useEffect(() => {\n        // Update the loader bar\n        const loaderBarFill = getLoaderBarFill();\n        loaderBarFill && loaderBarFill.classList.add(\"loader-bar-fill-state-1\");\n\n        // Load all fonts\n        const onFontsLoad = () => {\n            setAreFontsLoaded(true);\n        };\n\n        WebFont.load({\n            custom: {\n                families: [ \"FredokaOne\", \"Nunito:n4,n6,n7,n8\", \"NunitoSans:n4,n6,n7,i4,i7\" ]\n            },\n            timeout: 5000,\n            active: onFontsLoad,\n            inactive: onFontsLoad\n        });\n\n        // Load saved data\n        loadLevelScores()\n            .then((mapping) => {\n                setLevelScoreMap(mapping);\n\n                // Calculate total stars\n                let totalStars = 0;\n                for (const key in mapping) {\n                    totalStars += mapping[key].stars;\n                }\n\n                setStarCount(totalStars);\n                setIsSavedDataLoaded(true);\n            })\n            .catch(() => {\n                setLevelScoreMap(getDefaultLevelScoreMap());\n                setIsSavedDataLoaded(true);\n                toast.error(\"Could not retrieve saved data. Please refresh and try again.\");\n            });\n\n    }, []);\n\n    // Runs after each loading stage is completed\n    useEffect(() => {\n        // Update loading bar width\n        const numFinished = 1 + (areFontsLoaded ? 1 : 0) + (isSavedDataLoaded ? 1 : 0);\n        const loaderBarFill = getLoaderBarFill();\n        loaderBarFill && loaderBarFill.classList.add(`loader-bar-fill-state-${numFinished}`);\n\n        const onFinish = async () => {\n            await sleep(500); // Slight delay\n\n            // Update loading text\n            const loadingTextElement = document.getElementById(\"loading-text\");\n            loadingTextElement && (loadingTextElement.textContent = \"Let's go!\");\n            loadingTextElement && (loadingTextElement.classList.remove(\"loading-text-anim-on\"));\n\n            // Fade out loading bar\n            const loaderElement = document.getElementById(\"loading-anim-window\");\n            loaderElement && loaderElement.classList.add(\"loading-finished\");\n\n            // Wait for fade out to finish then remove the loader; app is now ready\n            await sleep(2000);\n            loaderElement && loaderElement.remove();\n            setIsReady(true);\n\n            // Toggle off the home animation after the next cycle; this prevents the full home\n            // screen animation from playing each time the user visits the home page; the full\n            // animation will only play if it is the first page the user visits\n            await sleep(0);\n            setPlayHomeAnimation(false);\n        }\n\n        if (areFontsLoaded && isSavedDataLoaded && !isReady) {\n            onFinish();\n        }\n    }, [ areFontsLoaded, isSavedDataLoaded ]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // Do not render anything until everything is loaded\n    if (!isReady) {\n        return null;\n    }\n\n    return (\n        // TODO: Uncomment and replace other app\n        // <div className=\"app\" onContextMenu={event => event.preventDefault()}>\n        <div className=\"app\" ref={ref}>\n            <ToastContainer />\n            <Router>\n                <Switch>\n                    <Route path=\"/game/:levelNumber\">\n                        <GameRedirect starCount={starCount} handleStarUpdate={handleStarUpdate}\n                            starsScoredOnLevel={starsScoredOnLevel}\n                            starsToUnlockLevel={starsToUnlockLevel}\n                            appHeight={height}\n                            levelScoreMap={levelScoreMap} />\n                    </Route>\n                    <Route path=\"/level-select\">\n                        <LevelSelect starCount={starCount} levelScoreMap={levelScoreMap}\n                            starsScoredOnLevel={starsScoredOnLevel}\n                            starsToUnlockLevel={starsToUnlockLevel} />\n                    </Route>\n                    <Route path=\"*\">\n                        <Home playAnimation={playHomeAnimation} onEraseData={eraseData}\n                            starsScoredOnLevel={starsScoredOnLevel}  />\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nfunction getLoaderBarFill(): (HTMLElement | null) {\n    return document.getElementById(\"loader-bar-fill\");\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app\";\nimport \"./index.scss\";\nimport \"../node_modules/react-resizable/css/styles.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}